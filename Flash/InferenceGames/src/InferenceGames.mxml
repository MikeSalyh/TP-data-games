<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="575" height="325"
			   creationComplete="testFlashPlayer()" 
			   pageTitle="Inference Games"
			   backgroundColor="#CCCCCC">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import common.*;
			
			import embedded_asset_classes.*;
			
			// ----------------------
			// --- PRIVATE SECTION ---
			// ----------------------
						
			private static const kMinimumRequiredVersion:Number = 11.6;	// the oldest version of flash player you can play this game on.
			private static const kDebugMode:Boolean = true; 			// set this to false, and the debug version will behave exactly like the release version.
			private static const kVersion:String = "v.2013.08.11";
			
			private static var staticStage:Stage; // a reference to the stage of this MXML file.

			private static var sControls:ControlsSWC;
			private static var sResults:ResultsSWC;
			private static var sBottomBar:BottomBarSWC;
			private static var sDataCannon:DataCannonSWC;
			private static var sUserPlayer:UserPlayerSWC;
			private static var sBotPlayer:BotPlayerSWC;
			
			// this method ensures that the flash player is a recent enough version to work.
			private function testFlashPlayer():void {
				if( VersionChecker.isValid(kMinimumRequiredVersion))
					startUp();
				 else
					BrickWall.visible = true;
			}
			
			private function startUp():void{
				BrickWall.visible = false;
				initVisualElements();
			}
			
			
			private function initVisualElements():void{	
				staticStage = systemManager.stage;
				
				sControls = new ControlsSWC();
				gameContainer.addChild(sControls);
				sControls.x = 293.1;
				sControls.y = 173.4;
				
				sResults = new ResultsSWC();
				gameContainer.addChild(sResults);
				sResults.x = 286.85;
				sResults.y = 163.5;
				
				sBottomBar = new BottomBarSWC();
				gameContainer.addChild(sBottomBar);
				sBottomBar.x = 287.55;
				sBottomBar.y = 324.95;
				
				sUserPlayer = new UserPlayerSWC();
				sBotPlayer = new BotPlayerSWC();
				gameContainer.addChild(sUserPlayer);
				gameContainer.addChild(sBotPlayer);
				sBotPlayer.x = 575;
				
				sDataCannon = new DataCannonSWC();
				gameContainer.addChild(sDataCannon);
				
				sControls.show();
				startNewRound();
			}
			
			// ----------------------
			// --- PUBLIC SECTION ---
			// ----------------------
			
			public static function get stage():Stage{
				return staticStage;
			}
			
			public static function startNewRound():void{
				
				// if one of the two player avatars is hidden, show it.
				if(Round.currentRound){
					if(Round.currentRound.lastBuzzer == UserPlayerSWC.PLAYER){
						sBotPlayer.show();
						sUserPlayer.gotoAndStop(1);
					}else if(Round.currentRound.lastBuzzer == BotPlayerSWC.BOT){
						sUserPlayer.show();
						sBotPlayer.gotoAndStop(1); // fixes a bug where the bot disappears.
					}
				}
				
				var boringRound:Round = new Round( 2, 5);
				sDataCannon.speed = .25;
				
				sControls.stopControlsMVC.stopStartBtn.pauseBtn.enabled = true;
			}
			
			// hit the buzzer, to bring up the recap.
			public static function hitBuzzer( user:Boolean = true):void{
				sControls.hide();
				sDataCannon.stopCannon();
				sControls.stopControlsMVC.stopStartBtn.pauseBtn.enabled = false;
				
				if( user){
					sControls.stopControlsMVC.stopStartBtn.gotoAndStop( "user");
					sBotPlayer.hide();
					Round.currentRound.lastBuzzer = UserPlayerSWC.PLAYER;
				} else {
					sControls.stopControlsMVC.stopStartBtn.gotoAndStop( "bot");
					sUserPlayer.hide();
					Round.currentRound.lastBuzzer = BotPlayerSWC.BOT;
				}
			}
			
		]]>
	</fx:Script>
	
	
	<!-- the game's background -->
	<s:BorderContainer id="background" y="36" width="575" height="255">
		<s:backgroundFill>
			<s:RadialGradient scaleX="1000" scaleY="1000">
				<s:GradientEntry color="0xE5C1D1"/>
				<s:GradientEntry color="0x8C7A8B"/>
			</s:RadialGradient>
		</s:backgroundFill>
	</s:BorderContainer>
	
	<!-- the UI component that holds all the game's SWC's -->
	<mx:UIComponent id="gameContainer" x="0" y="0"/>


	<!-- Error message for bad version of flash player -->	
	<s:BorderContainer id="BrickWall" visible="false" x="0" y="0"
					   width="575"
					   height="327" depth="999">
		<s:backgroundFill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x13B3C2"/>
				<s:GradientEntry color="0x1E5B77"/>
			</s:LinearGradient>
		</s:backgroundFill>
		
		<s:Label id="topLabelError" x="0" y="30" width="575"
				 color="0xffffff" fontFamily="Georgia" fontSize="20" fontWeight="bold"
				 text="You are using an outdated version of Adobe Flash Player." textAlign="center"/>
		<s:Label id="midLabelError" x="0" y="100" width="575"
				 color="0xffffff" fontFamily="Georgia" fontSize="15"
				 text="{'Inference Games requires Flash Player '+ kMinimumRequiredVersion +' or later.'}"
				 textAlign="center"/>
		<s:Label id="midLabel2Error" x="0" y="120" width="575"
				 color="0xffffff" fontFamily="Georgia" fontSize="15"
				 text="{'You are currently using Flash Player ' + VersionChecker.getVersion()}"
				 textAlign="center"/>
		<s:Button id="upgradeButton" x="{(575-350)/2}" y="190" width="350"
				  height="50" fontFamily="Georgia" label="Upgrade Flash Player" click="VersionChecker.openAdobeWebsite()"
				  enabled="true" fontSize="25"/>
		<s:Button id="ignoreButton" x="{(575-350)/2}" y="250" width="350"
				  height="30" fontFamily="Georgia" label="Ignore Warning" click="startUp()" enabled="true" fontSize="12"/>
		
	</s:BorderContainer>

</s:Application>
