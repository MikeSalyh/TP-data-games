<?xml version="1.0" encoding="utf-8"?>

<!-- ShipOdyssey.mxml -->
<!-- Copyright (c) 2011-2013 by University of Massachusetts and contributors -->
<!-- Project information: http://srri.umass.edu/datagames/ -->
<!-- Released under the MIT License http://www.opensource.org/licenses/mit-license.php -->
<!-- Keep Calm and Chive On -->
<!-- Terminology:
		Ship Odyssey - The name of this game/program. The goal of this game is to hunt for treasure,
			by sending down diving rats and dropping hooks.
		Game - Each game visits sites, finding treasure or not, until out of rats or out of hooks.
		Mission - There are multiple levels of difficulty, called 'Missions" (internally, numbered 1-5 for 5 levels).
		Mission Title - Each level has a distinct title ("Hundreds o' rats", etc.)
		Site - Each mission has multiple 'Sites' to search for the treasure.
        Treasures - There are 0-2 treasures per site (1 treasure per site for most levels), and treasures have different names.
		Hook / Hook Drop - Drop a hook to find treasure at the current site.
		Rat / Send Rats - Send down rats to locate the treasure (they come up at the treasure location plus some random error (with a fixed standard deviation for that level).
		Game Data -  Data is sent to Data Games (DG), 
		Game Cases - each game has a Game Case (date about the current game),
		Event Cases - each event case has data about the dropped rat.
  -->

<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="518" height="410" 
			   creationComplete="testFlashPlayer()" 
			   currentState="StartPage"
			   activate="ScriptInterface.signalActivation()" 
			   deactivate="ScriptInterface.signalDeactivation()"
			   pageTitle="Ship Odyssey"
			   backgroundColor="#CCCCCC"
			   backgroundColor.TreasureHunt="#294867">
	<fx:Style source="ShipOdyssey.css"/>
	
	<fx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.kcpt.scriptInterface.ScriptInterface;
			
			import common.*;
			
			import flash.display.*;
			
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.flash.UIMovieClip;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import odyssey.events.*;
			import odyssey.missions.*;
			
			private static const MINIMUM_REQUIREMENTS:Number = 11.6;	// the oldest version of flash player you can play this game on.
			private static const DEBUG_MODE:Boolean = true; 			// set this to false, and the debug version will behave exactly like the release version.
			
			public static const VERSION:String = "v.2013.07.31";
			private function getVersion():String {
				return( VERSION );
			}
						
			// ********** TREASURE HUNT CONSTANTS AND VARIABLES ********** :variables:
			
			//-- Public Constants
			public static const kCostPerHookDrop:int = 50; // Cost each time you drop a hook		
			public static const kInitCenter:Number = 50;// Starting center position of grappling hook.
			public static const kHookCenterPrecision:int = 2;// Number of digits past the decimal to which center is rounded.
			
			public static const kLocation:uint= 1;	// Array position of treasure location.
			public static const kValue:uint		= 2;	// Array position of treasure value.
			public static const kItem:uint		= 3;	// Array position of treasure item.
			public static const kMinLocation:Number = 0;	// Leftmost treasure location.
			public static const kMaxLocation:Number = 100;	// Rightmost treasure location.
			public static const kMaxRatsToSend:int = 500; // the most rats that can be sent.
			
			public static const kEventsCollectionName:String = "Events";
			public static const kGamesCollectionName:String = "Games";
			
			//-- Private variables
			private var mCurrMissionNum:int = 1;			// Game level of difficulty, 1+: corresponds to different mission names
			private var mStdDeviation:Number;				// Standard deviation of rat results.
			private var mRatsToSend:uint	= 10;			// Rats to send at one time: should match current stepper value.
			private var mCostPerRat:uint	= 1;			// Cost per rat in dollars.
			private var mRandomNormal:ParkMiller;			// Class that creates a normal distribution.
			private var mMathUtils:MathUtilities = new MathUtilities();			// Class that uses SRRI math functions.
			private var mCenterPosition:Number= kInitCenter;	// Center position of grappling hook.
			private var mMinHookRange:Number	= mCenterPosition - mHookRadius;	// Left edge of hook's grasp.
			private var mMaxHookRange:Number	= mCenterPosition + mHookRadius;	// Right edge of hook's grasp.
			private static var mHookRadius:uint= 2;			// Radius of grappling hook area.
			private var mNumTreasures:uint = 1;				// Number of treasures to find at the current location
			private var mCurrentTreasureNum:uint = 0;		// Starting treasure in zero-based array.
			private var mTreasuresFoundThisSite:uint= 0;	// Treasures found so far in current site (see BootyBarMVC.as for
			//private var mTreasureValueSoFar:uint = 0;		// Cumulative value of treasures found in current game.
			private var mRatCostSoFar:uint = 0;				// Cumulative value of rat cost in current game.
			private var mSitesVisitedThisGame:uint = 0;		// Number of sites visited in current game.
			//private var mEventSerialNum:uint	= 0;		// Serial number of current event in current game (rat(s) sent or hook dropped), begining with 1.
			private var mSiteSerialNum:uint	= 0;			// Serial number of current site, beginning with 1 (does not reset for new game).
			private var mGameSerialNum:uint	= 0;			// Serial number of current game, beginning with 1
			private var mRatsSent:uint		= 0;			// Number of rats already sent in current game.
			private var mHooksDropped:uint	= 0;			// Number of hooks already dropped in current game.
			private var mCurrentGameComplete:Boolean = false;// Has current game been won or lost yet?
			private var mFoundTreasure:Boolean = false; 	// Has the current hook drop found this treasure?
			private	var	parentCaseID:int = -2;				// parent (game-level) case ID for DG; -2 means DG data not yet initialized, -1 means that no game case is open, 0+ is valid ID
			
			private var mTreasuresAtLocArr:Array;			//Used for new multi-treasure aspect - tells how many treasures are at the current loc
			private var mTreasureLocArr:Array;				//location of each treasure at current loc, treasures are removed as found
			private var mTreasureLocArrLocked:Array;		// like the other array, but treasures aren't removed when they're found.
			private var mAutoSailOnAfterFoundTreasure:Boolean; //Added for lvl 2 where the user must choose when to sail on because there can be 0, 1, or 2 treasures
			private var mLocationFound:Number;					// for storing the location of a found treasure across timer steps
			
			// These arrays store the details of individual treasures.
			private var mTreasure0:Array;
			private var mTreasure1:Array;
			private var mTreasure2:Array;
			private var mTreasure3:Array;
			private var mTreasure4:Array;
			private var mTreasure5:Array;
			
			// Array of treasures (zero-based).
			private var mTreasureArray:Array;
			
			// Array of hooks dropped at a site.
			private var hooksDroppedArray:Array;
			
			//stores treasure locations for printing in Achor Pulled! dialog 
			private var mTreasurePrint:Array = new Array(2);
			
			//booty meter
			private var haveTreasure:Boolean = false; // whether you pulled up a treasure or not on your last hook drop
			
			//TreasureNamePicker. Make new obj to reset name iteration. 
			private var mNamePicker:TreasureNamePicker = new TreasureNamePicker();
			
			private function getCurrentMission():int{ return mCurrMissionNum; }
			private var popUpAPI:ShipMissionAPI = new ShipMissionAPI( newGame, getCurrentMission, setGameTitle);	
			
			//variables for holding loaded MovieClips
			private var popUpScreen:PopUpScroll = new PopUpScroll(popUpAPI);
			private var topBarMVC:TopBarMVC = new TopBarMVC();
			private var shipControlsMVC:ShipControlsMVC = new ShipControlsMVC();
			private var bootyMeter:BootyBarMVC = new BootyBarMVC();
			
			//timer when your money hits zero, waits before showing lose screen
			private var endTimer:Timer;
			
			// ********** END OF TREASURE HUNT CONSTANTS AND VARIABLES **********
			
			// Embed the start screen pirate ship graphic.
			// From http://www.rw-designer.com/cursor-download.php?id=2222 on 12/11/2010.
			// Cursor details are at: http://www.rw-designer.com/cursor-detail/2222
			//   "Published on August 14th 2007 by The Sword of the Heart."
			//   "Released under the Attribution Required (CC by) license."
			//   "Creative Commons - Attribution" see http://www.rw-designer.com/licenses
			// Converted from .eps format to .jpg.
			//[Embed(source="../odysseyAssets/Pirate Ship 515 x 410.png")]
			//[Bindable]
			//private var mPirateShipImage:Class;
			
			// ********** TREASURE HUNT SOUNDS ********
			
			// Embed the cash earned sound in the Treasure Hunt game.
			// New Cash register sound by Benboncan (only modification is converted to MP3)
			// Downloaded from http://www.freesound.org/people/Benboncan/sounds/91924/ on Feb 7, 2012
			// Licensed under the attribution license (http://creativecommons.org/licenses/by/3.0/)
			[Embed(source="../embedded_assets/91924-benboncan-till-with-bell.mp3")]
			private var CashMP3:Class;
			private var mCashSound:AdvancedSound = new AdvancedSound(new CashMP3() as Sound);
			
			// Embed the rat squeal sound in the Treasure Hunt game.
			// The link from which the sound came no longer exists as of 10/28/2011. The larger
			// web site from which the sound came redirects to another site.
			// A similar rat sound on on the new site requires login to hear. The official web
			// site of those sounds creator lists rats sounds for a price.
			// Modified by shortening clip in Audacity on Mac.
			//			[Embed("../src/assets/Rat Sound.mp3")]
			//			private var RatMP3:Class;
			//			private var mRatSound:SoundAsset = new RatMP3() as SoundAsset;
			
			// ********** END TREASURE HUNT SOUNDS **********
			
			// test flash player makes sure the player is meeting the minimum requirements.
			private function testFlashPlayer():void {
				if( VersionChecker.isValid(MINIMUM_REQUIREMENTS)) {
					startUp();
				} else {
					BrickWall.visible = true;
				}
			}
			
			// startUp() is called when the creation of this class is complete
			// and sets up necessary parameters for game initiation.			
			private	function startUp():void	
			{
				BrickWall.visible = false;
				mRandomNormal	= new ParkMiller();		// Create class that generates a normal distribution.
				this.sendCollectionData();				// initialize the DG/TinkerPlots data interface (and set up Graph and Table parameters)
				this.sendCreateGraphRequestToDG();		// create a Graph view in DG, if not present already
				
				initListeners();	// adds event listeners that exist for the entirety of the game.
				initVisualElements(); // any visual elements of .swc format are init'd here
				DivingRatDirector.init( ratContainer);	// pass the DivingRatDirector the container it's going to draw into.
				
				this.switchToTreasureHunt(new MouseEvent("click"));
				if(allAssetsLoaded)
					popUpScreen.chooseHuntLevel(); // show level selection on start up and start the game (true = start game after level selection)
				else
					popUpScreen.showLoading();
				
				//mTreasureValueSoFar			= 0;	// No value earned until treasures are found.
			}
			
			// set the rat stepper values and mRatsToSend.
			private function setRatsToSend( iCurrentRatsToSend:uint):void
			{
				// sync stepper
				shipControlsMVC.ratStepper.value = iCurrentRatsToSend;
			}
			
			// ask DG to create a Graph object, for viewing Site+Rat data.  It should ignore this request if a Graph already exists.
			private function sendCreateGraphRequestToDG():void {
				var result:String,
					doCommandObj:Object = {
							action: "createComponent",
							args: { type: "DG.GraphView" }
						},
					doCommandString:String = JSON.encode( doCommandObj );

				result = ScriptInterface.doCommand( doCommandString );
			}
			
			// ask DG to delete cases from completed missions (which exist at the game and event levels in the Table and Graph of the current DG document, if any)
			private function sendDeleteAllCaseDatatoDG():void {
				var result:String,
					doCommandObj:Object = {  action: "deleteAllCaseData" },
					doCommandString:String = JSON.encode( doCommandObj );
				
				result = ScriptInterface.doCommand( doCommandString );
			}
			
			// Send the Game-level and Event-level structure to DG, if connected to DG.  
			// The collections are the tables of cases and attributes.
			private	function sendCollectionData( ):void	{
				var	result:String;
				
				var initGameObj:Object = {
					action: "initGame",
					args: {
						name: "ShipOdyssey",
						dimensions: { width: this.width, height: this.height },
						collections: [
							{
								name: kGamesCollectionName,
								attrs:[
									{name: "GameNumber", type: "numeric", description: "Sequential Game Number" },//NEW
									{name: "MissionName", type: "nominal", description: "Game level"   } ,	
									{name: "TreasuresFound", type: "numeric", precision: 0, description: "Number of treasures found during game"   } , 
									{name: "SitesVisited", type: "numeric", precision: 0, description: "Number of sites visited during game"   }
									//{name: "RatsSent", type: "numeric", precision: 0, description: "Total number of rats sent during game"   } ,	
									//{name: "Drops", type: "numeric", precision: 0, description: "Number of times hook was dropped during game"   } , 
								] ,
								childAttrName: "Events_Record"
							},
							{
								name: kEventsCollectionName,
								attrs:	[
									{ name: "Site", type: "nominal", description: "Site number"   } ,
									{ name: "RatNumber", type: "numeric", precision: 0, description: "Rats sent so far in game"   } , 
									{ name: "RatReading", type: "numeric", precision: 1, description: "Location estimate provided by rat"  }
								],
								labels: {
									singleCase: "rat sent",
									pluralCase: "rats sent",
									singleCaseWithArticle: "a rat reading",
									setOfCases: "events",
									setOfCasesWithArticle: "events"
								},
								defaults: { xAttr: "RatReading", yAttr: "Site" }
							}
						] // collections
					} // args
				}; //initGameObj
				var	initGameString:String = JSON.encode( initGameObj );
				result = ScriptInterface.doCommand( initGameString ); // note: as of 2013-07-23 initGame always returns null
				this.parentCaseID = -1; // change from -2 to -1 to indicate game data sent (for error detection only)
				trace( "DG interface: initGame" );
			}
			
			// switchToTreasureHunt() sets the current state to the Treasure Hunt game
			// screen and initializes the game.
			protected function switchToTreasureHunt(iEvent:Event):void
			{
				currentState='TreasureHunt';	// Switch to Treasure Hunt screen.
				// Create a  game level modal dialog.
				// Listen for clicks on level buttons in dialog.
				initializeTreasureHunt();
			}
			
			// ********** TREASURE HUNT FUNCTIONS **********
			
			// initializeTreasureHunt() sets the Treasure Hunt game to initial values
			// and prepares the game for play.
			protected function initializeTreasureHunt():void
			{
				disableAllButtons();
				//mEventSerialNum			= 0;	// Don't count events until they occur (rat(s) sent or hook dropped).	
				mRatsSent				= 0;	// Reset number of rats sent.
				mHooksDropped			= 0;	// Reset number of hooks dropped.
				mCurrentGameComplete	= false;// Game is in play.
				
				//reset the TreasureNamePicker
				//mNamePicker = new TreasureNamePicker();
				
				// Set up the treasure number, location, value, and item 
				//(set as an empty string until it is set in the level switch below)
				mTreasure0 = new Array("1st", randomLocation(), 0, "");	//$WIP.
				mTreasure1 = new Array("2nd", randomLocation(), 0, "");
				mTreasure2 = new Array("3rd", randomLocation(), 0, "");
				mTreasure3 = new Array("4th", randomLocation(), 0, "");
				mTreasure4 = new Array("5th", randomLocation(), 0, "");
				
				// Create new treasure array and add treasures to array.
				mTreasureArray = new Array(	mTreasure0, mTreasure1, mTreasure2, 
					mTreasure3, mTreasure4 );
				
				//instead of choosing treasure randomly, chooses based on which level you are on.
				//Choose treasure name from matching level pool. Iterates through names linearly. 
				mCurrentTreasureNum = mCurrMissionNum - 1;
				if( mCurrentTreasureNum < 0 || mCurrentTreasureNum > 4 )
					throw new Error("invalid index to mTreasureArray");
				
				mTreasure0[kItem] = mNamePicker.poolShift(1);
				mTreasure1[kItem] = mNamePicker.poolShift(2);
				mTreasure2[kItem] = mNamePicker.poolShift(3);
				mTreasure3[kItem] = mNamePicker.poolShift(4);
				mTreasure4[kItem] = mNamePicker.poolShift(5);

				mTreasuresFoundThisSite		= 0;	// No treasures found yet.
				mRatCostSoFar				= 0;	// No rats have been used yet, so no cost yet.
				
				// sync the rat stepper with the current level if needed
				//setRatsToSend( mRatsToSend);
				
				// Move hook to center of treasure area.
				mCenterPosition						= 100;	
				shipControlsMVC.hookStepper.value	= mCenterPosition;					// Set stepper to center position.
				
				mMinHookRange						= mCenterPosition - mHookRadius;	// Left edge of hook's grasp.
				mMaxHookRange						= mCenterPosition + mHookRadius;	// Right edge of hook's grasp.
				shipControlsMVC.interval.text		= mMinHookRange.toFixed(1) + " – " + mMaxHookRange.toFixed(1);
				
				// Hide all parchment announcements until they are needed.OLD STUFF 6/19/13
				//mAllTreasuresFoundAlert.visible	= false;
				//mTimeRanOutAlert.visible		= false;
				//mCongratulationsAlert.visible	= false;
				//mTreasuresFoundLabel.visible	= false;
			}
			
			
			
			private function updateGameTitle():void{
				setGameTitle(Missions.getMissionTitle( mCurrMissionNum)+ ", Site " + mSiteSerialNum);
			}
			
			// start a new game.
			private function newGame( mission:MissionData, stripBtnListeners:Boolean, clearPreviousData:Boolean):void{
				updateGameTitle();
				if(stripBtnListeners)
					popUpScreen.stripMissionButtonListeners();
				
				mGameSerialNum += 1;
				mCurrMissionNum = mission.number;
				mSitesVisitedThisGame = 0;
				mStdDeviation = mission.stdDeviation;
				mHookRadius = mission.hookRadius;
				
				Water.fill = mission.waterGradient;
				Sky.backgroundFill = mission.skyGradient;
				cHerder.cleanClouds();
				cHerder.init( mission.cloudPattern);
				cHerder.startClouds();
				
				mCostPerRat	= mission.ratCost;	// Cost per rat in dollars.	
				mAutoSailOnAfterFoundTreasure = !mission.variableTreasures;

				bootyMeter.initialize( mission.startingRats, mission.missesAllowed);
				
				if( mission.variableTreasures)
					bootyMeter.nextSiteBtn.visible = true;
				else
					bootyMeter.nextSiteBtn.visible = false;
				
				newSite();
				setRatsToSend( mission.ratsInStepper);	// moving this down fixed a bug where the stepper did not properly take the starting # of rats in the stepper. (a very series issue for Mission 1)
				
				crane.setHookSize( mission.hookSize);
				sailingMovie.setHookSize( mission.hookSize);
				ReplayHook.setHookSize( mission.hookSize);
				
				shipControlsMVC.ratStepper.locked = mission.fixedRats;

				// if this mission has a fixed # of rats, use the big button instead of the stepper.
				if(mission.fixedRats)
					shipControlsMVC.useLargeRatButton();
				else
					shipControlsMVC.useRatStepper();
				
				// start a new Game case in DG
				if( this.parentCaseID >=0 ) {
					trace( "DG interface: unexpected open game case " );
				}
				if( clearPreviousData )  {
					trace( "DG interface: deleting all game cases" );
					sendDeleteAllCaseDatatoDG();
				}
				sendGameDataOpen();
			}
						
			// randomLocation() creates a new location on the ocean floor based on a uniform
			// distribution.
			protected function randomLocation():Number
			{
				return ((kMaxLocation - kMinLocation) * mRandomNormal.uniform()) + kMinLocation;
			}
			
			// treasuresFoundString() returns a formatted string saying how many treasures were found out
			// of the total number of treasures available.
			protected function treasuresFoundString():String
			{
				//if you've only found 1 of 2 treaures, this determines which one you found, and which you missed
				var foundFirstOf2:Boolean = false; 
				if(mLocationFound == mTreasureArray[mCurrentTreasureNum][kLocation]){
					foundFirstOf2 = true; 
				}
				
				//mNumTreasures: the number of treasures to find at the current location
				//mTreasuresFoundThisSite: the number of treasures the player found
				switch(mNumTreasures)
				{
					case 0:
						return "There were no treasures here.";
					case 1:
						if(mTreasuresFoundThisSite == 1) return "You found " + mTreasureArray[mCurrentTreasureNum][kItem] +" at " + printLocations();
						else return "You missed " + mTreasureArray[mCurrentTreasureNum][kItem] +" at " + printLocations();
						//if(mTreasuresFoundThisSite == 1) return "You found " + mTreasureArray[mCurrentTreasureNum][kItem] + " worth " + TextFormatter.toCash(mTreasureArray[mCurrentTreasureNum][kValue]) + " at " + printLocations();
						//else return "You missed " + mTreasureArray[mCurrentTreasureNum][kItem] + " worth " + TextFormatter.toCash(mTreasureArray[mCurrentTreasureNum][kValue]) + " at " + printLocations();
					case 2:
						switch(mTreasuresFoundThisSite)
						{
							//these really long strings format the info for the two treasures on two tabular lines
							case 0: return "You missed " + mTreasureArray[mCurrentTreasureNum][kItem] + " at " + String(int(mTreasureArray[mCurrentTreasureNum][kLocation] * 10) / 10) + "\n" + "You missed " + mTreasureArray[mCurrentTreasureNum + 1][kItem] + " at " + Math.round(mTreasureArray[mCurrentTreasureNum + 1][kLocation] * 10) / 10;
							//case 0: return "You missed " + mTreasureArray[mCurrentTreasureNum][kItem] + " worth " + TextFormatter.toCash(mTreasureArray[mCurrentTreasureNum][kValue]) + " at " + String(int(mTreasureArray[mCurrentTreasureNum][kLocation] * 10) / 10) + "\n" + "You missed " + mTreasureArray[mCurrentTreasureNum + 1][kItem] + " worth " + TextFormatter.toCash(mTreasureArray[mCurrentTreasureNum + 1][kValue]) + " at " + Math.round(mTreasureArray[mCurrentTreasureNum + 1][kLocation] * 10) / 10;
							//the really long string is there to format the message based on which of the two treasures you found, and which you missed 	
							case 1: return "You found " + ((foundFirstOf2) ? (mTreasureArray[mCurrentTreasureNum][kItem]) : (mTreasureArray[mCurrentTreasureNum + 1][kItem])) + " at " + ((foundFirstOf2) ? String(int((mTreasureArray[mCurrentTreasureNum][kLocation] * 10)) / 10) : String(int((mTreasureArray[mCurrentTreasureNum + 1][kLocation] * 10)) / 10)) + "\n" + "You missed " + ((!foundFirstOf2) ? (mTreasureArray[mCurrentTreasureNum][kItem]) : (mTreasureArray[mCurrentTreasureNum + 1][kItem])) + " at " + ((!foundFirstOf2) ? String(int((mTreasureArray[mCurrentTreasureNum][kLocation] * 10)) / 10) : String(int((mTreasureArray[mCurrentTreasureNum + 1][kLocation] * 10)) / 10));
							//case 1: return "You found " + ((foundFirstOf2) ? (mTreasureArray[mCurrentTreasureNum][kItem]) : (mTreasureArray[mCurrentTreasureNum + 1][kItem])) + " worth " + ((foundFirstOf2) ? TextFormatter.toCash(mTreasureArray[mCurrentTreasureNum][kValue]) : TextFormatter.toCash(mTreasureArray[mCurrentTreasureNum + 1][kValue])) + " at " + ((foundFirstOf2) ? String(int((mTreasureArray[mCurrentTreasureNum][kLocation] * 10)) / 10) : String(int((mTreasureArray[mCurrentTreasureNum + 1][kLocation] * 10)) / 10)) + "\n" + "You missed " + ((!foundFirstOf2) ? (mTreasureArray[mCurrentTreasureNum][kItem]) : (mTreasureArray[mCurrentTreasureNum + 1][kItem])) + " worth " + ((!foundFirstOf2) ? TextFormatter.toCash(mTreasureArray[mCurrentTreasureNum][kValue]) : TextFormatter.toCash(mTreasureArray[mCurrentTreasureNum + 1][kValue])) + " at " + ((!foundFirstOf2) ? String(int((mTreasureArray[mCurrentTreasureNum][kLocation] * 10)) / 10) : String(int((mTreasureArray[mCurrentTreasureNum + 1][kLocation] * 10)) / 10));
							case 2: return "You found " + mTreasureArray[mCurrentTreasureNum][kItem] + " at " + String(int(mTreasureArray[mCurrentTreasureNum][kLocation] * 10) / 10) + "\n" + "You found " + mTreasureArray[mCurrentTreasureNum + 1][kItem] + " at " + String(int(mTreasureArray[mCurrentTreasureNum + 1][kLocation] * 10) / 10);
							//case 2: return "You found " + mTreasureArray[mCurrentTreasureNum][kItem] + " worth " + TextFormatter.toCash(mTreasureArray[mCurrentTreasureNum][kValue]) + " at " + String(int(mTreasureArray[mCurrentTreasureNum][kLocation] * 10) / 10) + "\n" + "You found " + mTreasureArray[mCurrentTreasureNum + 1][kItem] + " worth " + TextFormatter.toCash(mTreasureArray[mCurrentTreasureNum + 1][kValue]) + " at " + String(int(mTreasureArray[mCurrentTreasureNum + 1][kLocation] * 10) / 10);
						}
					default: return "You found " + mTreasuresFoundThisSite + " of the " + mNumTreasures + " treasures!";
				}
			}
			
			//prints any number of treasure locations based on how many treasures are in the water
			private function printLocations():String{
				var outString:String = "";
				for(var j:int=0; mTreasurePrint[j]; j++){
					outString = outString + int(mTreasurePrint[j] * 10)/10 + ((mTreasurePrint[j + 1]) ? " and " : "");
				}
				return outString;
			}
			
			// ************MAIN GAME FUNCTIONS************
			// show how much the currently dropped rats are going to cost on the cost meter.
			protected function onMouseOverRatsButton(event:MouseEvent):void
			{
			}
			protected function onMouseOutRatsButton(event:MouseEvent):void
			{
			}

			// this function sets the max # of rats your stepper goes up to, based on how much $ you have.
			private function updateRatLimit():void{
				var maxRats:int = (mCostPerRat == 0 ? kMaxRatsToSend : Math.max(bootyMeter.rats/mCostPerRat, 0));
				if(maxRats > kMaxRatsToSend)
					maxRats = kMaxRatsToSend;
				shipControlsMVC.ratStepper.maxValue = maxRats;
			}
			
			// onClickSendRatsButton() is called when the Send Rats button is
			// pressed.
			protected function onClickSendRatsButton(event:MouseEvent = null):void{
				if(shipControlsMVC.ratStepper.validate()){ // check if the stepper is valid #, based on how much $ you have.
					if(mCostPerRat >= bootyMeter.rats){
						shipControlsMVC.ratStepper.gotoAndPlay("blink"); // make the stepper flash red if you can afford 0 rats.
					}else{
						if(mCostPerRat > 0){ // pay if rats cost $
							bootyMeter.pay(mCostPerRat * mRatsToSend);
							updateRatLimit();
						}
						//				mRatSound.play(); // Play rat sound.
						
						// For every rat sent, update Results text and send Rat data to TinkerPlots/DG
						var	numTreasuresHere:int = mTreasureLocArr.length,
							noisyLocation:Number, 
							ratNum:int, //init vars that are used in all 3 forks
							evenOdd:int = 0,
							eventsAtATime:int = Math.max( 1, Math.round( mRatsToSend / 10 )),
							eventArray:Array = [];
						//trace("rats to send: " + mRatsToSend);
						for(ratNum = 0; ratNum < mRatsToSend; ++ratNum){
							mRatsSent +=1; // Increment rat counter.
							if(numTreasuresHere == 1){
								// Generate a noisy result based on the current treasure's location.
								noisyLocation = (mRandomNormal.standardNormal() * mStdDeviation) + mTreasureLocArr[0]; // Display nothing after decimal point.		
							} else if(numTreasuresHere == 0){
								//get random normal values from the entire range
								noisyLocation = randomLocation();
							} else if(numTreasuresHere == 2) {
								//do swap back and forth for two locations if they have 2 left
								noisyLocation = (mRandomNormal.standardNormal() * mStdDeviation) + mTreasureLocArr[evenOdd];
							}
							
							
							eventArray.push( getEventDataValues( noisyLocation ));
							if( (ratNum+1==mRatsToSend) || (eventArray.length >= eventsAtATime )){
								DivingRatDirector.addRat( noisyLocation, eventArray);
								eventArray = []; // clear values already sent
							}else{
								DivingRatDirector.addRat( noisyLocation);					
							}
							evenOdd = (evenOdd+1)%2;
						}
						if(mRatsToSend > 0)
							DivingRatDirector.releaseRats();
					}
				}
			}
			
			// when a rat animation finishes, put the data on DG.
			private function finishRatDive(e:RatEvent):void {
				enableRatsButton(e);
				//popUpScreen.displayMessage("You're out of Rats!", "Use the data you've collected to make your final hook drops. This will be the last site of your game.");
				enableHookButton(e);

				// when the rat drop finishes, update the stepper if N is bigger than the # of rats you have left.
				updateRatLimit();
				shipControlsMVC.ratStepper.validate();
				pushRatDataToDG(e);
			}
			
			// put the rat data on DG, when the animation finishes
			private function pushRatDataToDG(e:RatEvent):void{
				for(var i:int = 0; i < DivingRatDirector.dataArray.length; i++){
					//trace(DivingRatDirector.dataArray[i]);
					sendEventData("Rat",  DivingRatDirector.dataArray[i]);	
				}
				DivingRatDirector.clearDataArray();
				sendGameDataUpdate();
			}
			
			// onChangeCenterPosition() is called when the value of the hook's
			// center position is changed.
			protected function onChangeCenterPosition(event:Event):void
			{
				// Update the hook's range based on the center position.
				//mCenterPositionStepper.value = mMathUtils.setPrecision(mCenterPositionStepper.value, kHookCenterPrecision);
				var prevCP:int = mCenterPosition;
				mCenterPosition			= shipControlsMVC.hookStepper.value; //mCenterPositionStepper.value;
				
				mMinHookRange			= mCenterPosition - mHookRadius;	// Left edge of hook's grasp.
				mMaxHookRange			= mCenterPosition + mHookRadius;	// Right edge of hook's grasp.
				
				shipControlsMVC.interval.text = mMinHookRange.toFixed(1) + " - " + mMaxHookRange.toFixed(1);
				
				if(crane){	// failsafe to ensure that the crane exists.
					if(event.type == CraneEvent.DRAGGING){
						crane.toFrame(mCenterPosition);
					}else if(Math.abs(mCenterPosition - prevCP) < 2){
						crane.toFrame(mCenterPosition);
					}else{
						crane.tweenTo(mCenterPosition, 1); 
					}
				}
			}
			
			// onChangeRatStepper() is called when the number of rats to be sent
			// is changed.
			protected function onChangeRatStepper(e:Event):void
			{
				// Update number of rats to be sent at one time.
				mRatsToSend = shipControlsMVC.ratStepper.value;
			}
			
			// show how much the hook drop is going to cost
			protected function onMouseOverDropHookButton(event:MouseEvent):void
			{
			}
			
			protected function onMouseOutDropHookButton(event:MouseEvent):void
			{
			}
			
			// onClickDropHookButton() is called when the Drop Hook button is
			// pressed and handles all actions assiociated with attempting to
			// retrieve treasure at the specified location.
			protected function onClickDropHookButton(event:MouseEvent = null):void
			{		
				shipControlsMVC.disableHookButton();
				crane.canDrag = false;
				
				shipControlsMVC.hookStepper.validate();
				//check to see if the crane needs to move before we can drop the hook
				//this happens if someone changes the value of the stepper and then clicks the Drop Hook button before the crane finishes moving
				if(mCenterPosition != shipControlsMVC.hookStepper.value || Math.abs(crane.getFrame()- mCenterPosition)>1){
					transitionTimer = new Timer(500, 0);
					transitionTimer.addEventListener(TimerEvent.TIMER,waitOnCraneMove);
					transitionTimer.start();
				}else{
					// Clear hint text next to pirate head.
					//mEventSerialNum 	+= 1; // Dropping a hook counts as an event.
					mHooksDropped 	+= 1; // Increment counter of hooks dropped.
					
					// Check if we snagged any treasures
					var numTreasuresHere:int = mTreasureLocArr.length;
					var loc1:Number, loc2:Number; //use 2 locs since we have a max of 2 treasures at each spot
					if(numTreasuresHere == 0){
						loc1 = loc2 = -1000; //make the number unreachable
					}else if(numTreasuresHere == 1){
						loc1 = loc2 = mTreasureLocArr[0]; // both go to the same loc;
					}else if(numTreasuresHere == 2){
						loc1 = mTreasureLocArr[0];
						loc2 = mTreasureLocArr[1];
					}
					mFoundTreasure = false;
					if(loc1 >= mMinHookRange && loc1 <= mMaxHookRange){
						mFoundTreasure = true; //sets that we found the treasure
						mLocationFound = loc1; //gives us the loc for displaying in the feedback panel
						mTreasureLocArr.shift();
					}else if(loc2 >= mMinHookRange && loc2 <= mMaxHookRange){
						mFoundTreasure = true; //same as above
						mLocationFound = loc2;
						mTreasureLocArr.splice(-1,1);
					}
					dropHook();
				}
			}
			
			//called from the PopUpMVC when the game needs to be restarted
			/*private function restartMission(startNextMission:Boolean = true):void{
				finishSite();
				
				if(startNextMission){
					initializeTreasureHunt();
					newSite();
				}
				sailingMovie.hardReset();	//the ship sailing movie will be zoomed out.
				shipControlsMVC.hookStepper.value = 100;
				onChangeCenterPosition(new Event("Stepper"));
			}
			*/
			
			//wait and check timer routine for when the hook is moving before a drop
			private function waitOnCraneMove(e:TimerEvent):void{
				if(mCenterPosition == shipControlsMVC.hookStepper.value && Math.abs(crane.getFrame()- mCenterPosition)<1){
					transitionTimer.stop();
					transitionTimer.removeEventListener(TimerEvent.TIMER, waitOnCraneMove);
					onClickDropHookButton(new MouseEvent(MouseEvent.CLICK));
				}
			}
			
			//call the animation, disable all buttons during animation, and start a timer
			private function dropHook():void{
				disableAllButtons(); // this makes the next site button invisible
				bootyMeter.disableNextSiteButton(false);  // this makes the next site button visible, but disabled.
				
				var hookDropTime:Number = 1;
				var hookRaiseTime:Number = 2.75;
				
				crane.dropHook(mFoundTreasure, hookDropTime, hookRaiseTime);
				transitionTimer = new Timer( (hookDropTime + hookRaiseTime)*1000 , 1);
				transitionTimer.addEventListener(TimerEvent.TIMER_COMPLETE, hookDropTimerFinish);
				transitionTimer.start();
			}
			
			//return from dropHook()::transitionTimer.start()
			protected function hookDropTimerFinish(e:TimerEvent):void{
				//does the visual and sound items that occur after the hook drop finishes playing
				//or as the item on the hook comes into view
				transitionTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, hookDropTimerFinish);				
				
				hooksDroppedArray.push(new Array(mCenterPosition, mFoundTreasure, lastHookItem));
				
				if( mFoundTreasure)
				{
					// Add treasure value to accumulated wealth.
					bootyMeter.finishTreasureDrop(true);

					mCashSound.play(); // Play cash register sound.	
					
					// Tell the player which treasure was found and how much it is worth.					
					
					if( Missions.getMission( mCurrMissionNum).variableTreasures) // if on level 2
					{
						var valueInDollars:String = TextFormatter.toCash(mTreasureArray[mCurrentTreasureNum][kValue]);
						if(bootyMeter.isOutOfHooks){
							haveTreasure = true;
							onClickExitNewGame(new MouseEvent("click")); // simulate pressing 'end game'
						} else {
							enableAllButtons();
						}
					} else // on levels 1,3,4
					{
						haveTreasure = true;
						popUpScreen.doReplay(hooksDroppedArray, mTreasureLocArrLocked);
						onClickExitNewGame(new MouseEvent("click")); // simulate pressing 'end game'
					}
					mTreasuresFoundThisSite++;
				}
				else // Treasure was not found at drop location.
				{
					//bootyMeter.pay(kCostPerHookDrop);	//pay, if only on misses.
					//updateRatLimit();
					haveTreasure = false;
					bootyMeter.finishTreasureDrop(false);
					//updateRatLimit();
					if(!bootyMeter.isOutOfHooks){
						enableAllButtons();
					}else{
						popUpScreen.doReplay(hooksDroppedArray, mTreasureLocArrLocked);
						onClickExitNewGame(new MouseEvent(MouseEvent.CLICK));
					}
						
					
					// Send event data to TinkerPlots / Fathom.
					//sendEventData("Hook", getEventDataValues( "Miss" )); --Disabled
				}
				
				// send updated [mHooksDropped, mTreasuresFoundThisSite, profitSoFar] to DG game case
				sendGameDataUpdate(); // TO-DO: remove this call if nothing changes here.
			}
			private function hideScroll(e:Event):void{
				popUpScreen.hide(e);
				crane.hideTreasure();
			}
			private function hideScrollThenSail(e:Event):void{
				popUpScreen.hide(e);
				zoomOutAndSail(e);
			}
			
			//instead of incrementing mCurrentTreasureNum by 1 for each location, pick a random treasure so there is no limit.
			private function selectRandomTreasure():uint
			{
				//generate a random integer between [0,5]
				return Math.round(Math.random()*5) as uint;
			}
			
			// onClickExitNewGame() starts a new game and ends a game in progress
			protected function onClickExitNewGame(iEvent:MouseEvent):void
			{
				disableAllButtons();
				zoomOutAndSail();
			}
			
			// This function is called when a site is complete. It sets everything back to how it started, and then shows the instant replay.
			// If you click 'end mission', this method isn't called because you don't want a replay.
			// this function was previously named exitGame
			private function finishSite(iEvent:Event = null):void{
				
				//clean up everything so it is back in initial state for start of next game
				crane.visible = false;
				sailingMovie.visible = true;
				sailingMovie.reset();
				mCurrentGameComplete = true;// Game is now complete.	
				
				if(!popUpScreen.visible){
					if(haveTreasure || bootyMeter.isOutOfHooks || bootyMeter.isOutOfRats){
						haveTreasure = false;
						var valueInDollars:String = TextFormatter.toCash(mTreasureArray[mCurrentTreasureNum][kValue]);
						if(bootyMeter.isOutOfHooks || bootyMeter.isOutOfRats){
							popUpScreen.displayTreasure(treasuresFoundString(), popUpScreen.finishGame, false, true);
						}else{
							popUpScreen.displayTreasure(treasuresFoundString(), newSite);
						}
					}else{
						popUpScreen.doReplay(hooksDroppedArray, mTreasureLocArrLocked);
						popUpScreen.displayRecap(treasuresFoundString(), newSite);
					}
				}

				shipControlsMVC.disableRatsButton();
				shipControlsMVC.disableHookButton();
				shipControlsMVC.hookStepper.enabled = false;
				shipControlsMVC.ratStepper.enabled = false;
				
				popUpScreen.treasuresFound = bootyMeter.treasuresFound;
				popUpScreen.rating = getRating();
			}
			
			// things to do when the game has ended (user misses the 2nd hook drop), see also newGame(), endGame()
			private function finishGame(e:Event = null):void{
				popUpScreen.doReplay(hooksDroppedArray, mTreasureLocArrLocked);
				popUpScreen.displayRecap(treasuresFoundString(), popUpScreen.finishGame, true);	
				popUpScreen.treasuresFound = bootyMeter.treasuresFound;
				popUpScreen.rating = getRating();
				
				if( this.parentCaseID >= 0 ) {
					sendGameDataClose();
				}
			}
			
			private function getRating():int{
				return Missions.getMission(mCurrMissionNum).getRating(bootyMeter.treasuresFound);
			}
			
			// set up our game for a new site.
			private function newSite(iEvent:Event = null):void {
				popUpScreen.visible = false;
				readyToZoomIn();
				disableAllButtons();
				mSiteSerialNum += 1;
				mSitesVisitedThisGame += 1;
				switchToTreasureHunt(iEvent); //start a new game TO-DO: site-specific initialization out of switchToTreasureHunt() and don't call here.

				if( mSitesVisitedThisGame >= 2){
					sendGameDataUpdate(); // send updated SitesVisited to DG
				}
				
				updateRatLimit();
				updateGameTitle();
			}
			
			// Toggles the Instructions scroll
			private function onClickHelpButton():void
			{
				if(popUpScreen.isShowingHelp())
				{
					popUpScreen.hideHelp();
				}
				else
				{
					popUpScreen.displayHelp();
				}
			}
			
			// should we change this, or make it work? It's not being called at all right now. $WIP
			private function updateProfitAfterSail():void{
				//update the cumulative cost of using the ship and crew as well as the profit so far
				mCurrentTreasureNum = selectRandomTreasure();
			}
			
			// send the Game-level data to TinkerPlots or DG.
			// this creates and opens the game case, see also sendGameDataClose()
			private function sendGameDataOpen():void{
				var openGameCaseObj:Object = {
						action: "openCase",
						args: { 
							collection: kGamesCollectionName,
							values: [
								mGameSerialNum,
								Missions.getMissionTitle( mCurrMissionNum),
								bootyMeter.treasuresFound,
								mSitesVisitedThisGame
							]
						} 	
					}; // openGameCaseObj
					
				if( this.parentCaseID >= 0 ) {
					trace( "DG interface error: openCase without closing previous parent case ID ("+this.parentCaseID+")" );
				} else {
					var	resultString:String = ScriptInterface.doCommand( JSON.encode( openGameCaseObj ));
					var resultObj:Object = (resultString ? JSON.decode( resultString ) : null );
					this.parentCaseID = (resultObj && resultObj.success ? resultObj.caseID : -1 );
					if(VersionChecker.isDebug && DEBUG_MODE && this.parentCaseID == -1 ) {
						trace("DG interface: simulating openCase with parentCaseID 0 (debug only)");
						this.parentCaseID = 0; // fake a valid case ID for validating sendGameDataUpdate() when not connected to DG
					}
				}
			}
			
			// send the Game-level data to TinkerPlots or DG.
			// this updates and closes the game case created by sendGameDataOpen()
			private function sendGameDataClose():void{
				sendGameDataUpdate( true );
			}
			
			// send the Game-level data to DG, if connected to DG
			// this updates and optionally closes the game case created by sendGameDataOpen()
			private function sendGameDataUpdate( wantCaseClosed:Boolean = false ):void{
				var	whichAction:String = (wantCaseClosed ? "closeCase" : "updateCase" ),
					closeGameCaseObj:Object = { 
						action: whichAction,
						args: { 
							collection: kGamesCollectionName,
							caseID: this.parentCaseID,
								values: [
									mGameSerialNum,		 // Game number starting with 1 since launch of application.
									Missions.getMissionTitle( mCurrMissionNum),
									bootyMeter.treasuresFound,
									mSitesVisitedThisGame
									// Rating
									// ending type
									//mRatsSent,			 // Total number of rats sent during current game.
									//mHooksDropped,		 // Number of times hook was dropped during current game.
									//bootyMeter.rats  // Value of (treasures found) minus (crew/ship costs and rat costs).
								]
							}
						};
				if( this.parentCaseID >= 0 )
					ScriptInterface.doCommand( JSON.encode( closeGameCaseObj ));
				else
					trace( "DG interface error: "+whichAction+" with invalid parent case ID ("+this.parentCaseID+")" );
				
				if( wantCaseClosed )
					this.parentCaseID = -1;	// set to invalid ID after close so we can detect errors
			}
			
			// get the event data to send to Tinkerplots/DG, 
			// returned as an array for use by sendEventData()
			private function getEventDataValues( val:Number ):Array {
				return [
					mSiteSerialNum, // Game number (1-n)
					mRatsSent, // Rat number (1-n)
					val // Location estimate provided by rat.
				];
			}
			
			// Send event case data to DG, if connected to DG.
			// Event data are "Rat Sent" events (one rat sending per case); we no longer send "Hook dropped" events
			private function sendEventData(type:String, valArrays:Array):void{
				
				var createEventCaseObj:Object = 
						{
							action: "createCases",
							args: {
								collection: kEventsCollectionName,
								parent: this.parentCaseID,
								values: valArrays
							}
						};				
				
				if( this.parentCaseID >= 0 )
					ScriptInterface.doCommand( JSON.encode( createEventCaseObj ));
				else
					trace( "DG interface error: createCases (Event level) with invalid parent case ID ("+this.parentCaseID+")" );
			}
			
			//timer response functions for running the game (will inline them near where they go as it makes sense)
			//(decouples visual with state and play so a broken animation doesn't stop play)
			private function zoomOutAndSail(e:Event = null):void{
				trace("zoomOutAndSail");
				var craneFrame:int = crane.getFrame();
				
				cHerder.setCloudSpeed(-.5);
				shipControlsMVC.hookStepper.value = 100;
				onChangeCenterPosition(new Event("Stepper"));
				DivingRatDirector.abortDive();	//when you click end game, if any rats are being animated, this takes care of them.

				transitionTimer = new Timer(1900, 1); //timer is in milliseconds
				transitionTimer.addEventListener(TimerEvent.TIMER_COMPLETE, finishSite);
				
				sailingMovie.visible = true;
				crane.visible = false;
				sailingMovie.doZoomOut(haveTreasure);
				sailingMovie.sendCraneToFrame(craneFrame);
				transitionTimer.start()
			} 
			
			private function readyToZoomIn():void{
				sailingMovie.reset();
				cHerder.setCloudSpeed(1.5);
				transitionTimer = new Timer(5000, 1);
				transitionTimer.addEventListener(TimerEvent.TIMER_COMPLETE, zoomInTimerFinish);
				sailingMovie.doZoomIn();
				transitionTimer.start();
			}
			
			private function zoomInTimerFinish(e:TimerEvent):void{
				mTreasureLocArr = new Array();
				mTreasureLocArrLocked = new Array();
				if(Missions.getMission( mCurrMissionNum).variableTreasures) //'Treasure or Not' can have 0, 1, or 2 treasures
				{
					mNumTreasures = Math.round(Math.random()*2);	//random int in set {0,1,2}
					
					try
					{
						// Make sure the next two treasures are not too close together.
						var loc1:Number = mTreasureArray[mCurrentTreasureNum][kLocation];
						var loc2:Number = mTreasureArray[mCurrentTreasureNum+1][kLocation];
					}
					catch(e:Error)
					{
						trace(e);
					}
					while(Math.abs(loc1-loc2) < 30){
						loc2 = mTreasureArray[mCurrentTreasureNum+1][kLocation] = randomLocation();
					}
				}
				else
				{
					mNumTreasures = 1;	//only 1 treasure for levels 1, 3, & 4
				}
				
				for(var i:int=0; i<mNumTreasures; i++)
				{
					mTreasureLocArr.push(mTreasureArray[mCurrentTreasureNum+i][kLocation]);
					mTreasureLocArrLocked.push(mTreasureArray[mCurrentTreasureNum+i][kLocation]);
				}
				
				
				if(VersionChecker.isDebug && DEBUG_MODE)
				{
					if(mNumTreasures == 0)
					{
						trace("No treasures at this location");
					}
					for(var j:int=0; mTreasureLocArr[j]; j++)
					{
						var treasure:Array = mTreasureArray[mCurrentTreasureNum+j];
						trace("Treasure "+j+": " + treasure[kItem] + " at " + treasure[kLocation]);
					}
				}
				
				crane.visible = true;
				sailingMovie.visible = false;
				enableAllButtons();
				
				
				for(var k:int = 0; mTreasureLocArr[k]; k++){
					mTreasurePrint[k] = mTreasureLocArr[k];
				}
				
				hooksDroppedArray = new Array();
			}
			
			//currently unused since there are no rat drop sounds or anims
			private function ratDropTimerFinish(e:TimerEvent):void{
				
			}
			
			//button control methods
			private function disableAllButtons(e:Event = null):void{
				shipControlsMVC.hookStepper.enabled = false;
				shipControlsMVC.disableHookButton();
				shipControlsMVC.ratStepper.enabled = false;
				shipControlsMVC.disableRatsButton();
				topBarMVC.disableHelpButton();
				bootyMeter.disableEndMissionButton();
				bootyMeter.disableNextSiteButton();
				
				if(crane)	// failsafe to prevent the crane from being turned off before it loads.
					crane.canDrag = false;
			}	
			
			private function enableAllButtons():void{
				topBarMVC.enableHelpButton();
				shipControlsMVC.hookStepper.enabled = true;
				shipControlsMVC.ratStepper.enabled = true;
				shipControlsMVC.enableRatsButton();
				bootyMeter.enableNextSiteButton();
				bootyMeter.enableEndMissionButton();

				enableHookButton(); // this function ensures that the hook button SHOULD be enabled before doing it.
				if(crane)//failsafe for crane loading
					crane.canDrag = true;
			}
			
			private function disableRatHookButton(e:RatEvent = null):void{
				shipControlsMVC.disableRatsButton();
				shipControlsMVC.ratStepper.enabled = false;
				shipControlsMVC.disableHookButton();
				shipControlsMVC.hookStepper.enabled = false;
				//if(crane)
					//crane.canDrag = false;
			}
			
			// turns on the rat button & stepper, assuming you have any rats.
			private function enableRatsButton(e:Event = null):void{
				if(!bootyMeter.isOutOfRats){
					shipControlsMVC.ratStepper.enabled = true;
					shipControlsMVC.enableRatsButton();
				}
			}
			
			private function enableHookButton(e:Event = null):void{
				if( (VersionChecker.isDebug && DEBUG_MODE) || mRatsSent > 0){
					shipControlsMVC.enableHookButton();
					shipControlsMVC.hookStepper.enabled = true;
					if(crane)
						crane.canDrag = true;
				}
			}
			
			//********new visual items and visual only code **********
			private var crane:MovieClip;			
			private var sailingMovie:MovieClip;
			private var cHerder:MovieClip;
			private var allAssetsLoaded:Boolean = false; // set to true when all SWF loaders are done.
			
			private var skyAreaMask:Shape;
			private var sailMask:Shape;
			private var craneMask:Shape;
			private var transitionTimer:Timer;
			private var dayTickOffClockTimer:Timer;
			
			//ties the crane to MXML loader and sets up the mask
			private function initCrane():void{
				crane = CraneLoader.content as MovieClip;
				
				crane.visible = false;
				craneMask = new Shape();
				craneMask.graphics.beginFill(0x000000);
				craneMask.graphics.drawRect(0,0,395,286);
				uic.addChild(craneMask);//have to add masks to display list or else RemovePopUp will hide them and the object they are masking
				crane.mask = craneMask;
				crane.addEventListener(CraneEvent.DRAGGING, updateCraneStepper);
				crane.addEventListener(CraneEvent.SCALE_CLICKED, updateCraneStepperSnapped);
				
				crane.addEventListener(CraneEvent.GOT_BOOT, handleGettingJunk);
				crane.addEventListener(CraneEvent.GOT_SEAWEED, handleGettingJunk);
				crane.addEventListener(CraneEvent.GOT_NOTHING, handleGettingJunk);

				checkSWFLoaders();
			}
			
			private var lastHookItem:String;
			private function handleGettingJunk(e:Event):void{
				lastHookItem = e.type;
			}
			
			private function updateCraneStepper(e:Event):void{
				var value:int = crane.getFrame();
				if(value == 1 && crane.zeroed)
					value = 0;
				shipControlsMVC.hookStepper.value = value;
				shipControlsMVC.hookStepper.validate();
				onChangeCenterPosition(e);
			}
			private function updateCraneStepperSnapped(e:Event):void{
				shipControlsMVC.hookStepper.value = crane.snappingPoint;
				onChangeCenterPosition(e);
			}
			
			//loads the swf, sets colors, and starts the clouds
			private function initClouds():void{	
				cHerder = CloudLoader.content as MovieClip;
				skyAreaMask = new Shape();
				skyAreaMask.graphics.beginFill(0x000000);
				skyAreaMask.graphics.drawRect(0,0,395,186);
				uic.addChild(skyAreaMask);//have to add masks to display list or else RemovePopUp will hide them and the object they are masking
				cHerder.mask = skyAreaMask;
				checkSWFLoaders();
			}
			
			//ties boat swf loader to code
			private function initBoat():void{				
				//load boat
				sailingMovie = BoatLoader.content as MovieClip;
				//set zoom variables
				sailingMovie.zoomTime = 48;
				sailingMovie.finalX = -26;
				sailingMovie.finalY = -122;
				//set mask so zoom doesn't go outside box
				sailMask = new Shape();
				sailMask.graphics.beginFill(0x000000);
				sailMask.graphics.drawRect(0,0,395,286);
				uic.addChild(sailMask);//have to add masks to display list or else RemovePopUp will hide them and the object they are masking
				sailingMovie.mask = sailMask;
				//start sailing
				sailingMovie.ToyBoat.startSail(); 
				checkSWFLoaders();
			}

			private function checkSWFLoaders():void{
				if(crane && cHerder && sailingMovie) {
					allAssetsLoaded = true;
					popUpScreen.chooseHuntLevel(); // show level selection on start up and start the game (true = start game after level selection)
				}
			}
			
			private function setGameTitle(arg:String):void {
				topBarMVC.setTitle(arg);
			}
			
			// This function is called when the game starts. These objects will have the following listeners for the entirety of the play session:
			private function initListeners():void{
				DivingRatDirector.dispatcher.addEventListener(RatEvent.RELEASED, disableRatHookButton);
				DivingRatDirector.dispatcher.addEventListener(RatEvent.RETURNED, finishRatDive);
			}
		
			// attach the booty bar to the screen. And popups
			private function initVisualElements():void{	
				bootyMeterContainer.addChild(bootyMeter);
				bootyMeter.nextSiteFunction = onClickExitNewGame;
				bootyMeter.endMissionFunction = endGame;
				
				popUpContainer.addChild(shipControlsMVC);
				shipControlsMVC.x = 7;
				shipControlsMVC.y = 35;
				shipControlsMVC.setRatButtonFunction(onClickSendRatsButton);
				shipControlsMVC.setHookButtonFunction(onClickDropHookButton);
				shipControlsMVC.ratStepper.setOnChangeFunction(onChangeRatStepper);
				shipControlsMVC.hookStepper.setOnChangeFunction(onChangeCenterPosition);
				
				popUpContainer.addChild(popUpScreen);
				popUpScreen.visible = false;

				popUpContainer.addChild(topBarMVC);
				topBarMVC.setVersion(getVersion());
				topBarMVC.setStage(this.systemManager.stage);
				topBarMVC.helpFunction = onClickHelpButton;
				
				addEventListener(MouseEvent.CLICK, handleFocus);
				
				
			}	
			
			//MXML's with multiple SWF's handle focus in a strange way. This keeps the focus working the way it should.
			private function handleFocus(e:MouseEvent):void{
				var clickingTextField:Boolean = (e.target is TextField);
				if(!clickingTextField)
					this.setFocus();
			}

			// the user has clicked the End Game button, we must confirm that next.
			private function endGame(e:Event = null):void{
				popUpScreen.confirmAction(endGameConfirmed);
			}
			
			// the user has confirmed that they want to end the game, now we show them their score.
			// see also finishGame(), newGame().
			private function endGameConfirmed(e:Event = null):void{								
				sailingMovie.hardReset();	//the ship sailing movie will be zoomed out.
				sailingMovie.visible = true;
				topBarMVC.disableHelpButton();
				crane.visible = false;
				shipControlsMVC.hookStepper.value = 100;
				onChangeCenterPosition(new Event("Stepper"));
				if( this.parentCaseID >= 0 )
					sendGameDataClose();
				popUpScreen.treasuresFound = bootyMeter.treasuresFound;
				popUpScreen.rating = getRating();
				
				popUpScreen.finishGame();
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="StartPage"/>
		<s:State name="TreasureHunt"/>
	</s:states>
	
	<fx:Declarations>	
	</fx:Declarations>

	<!-- Left Sidebar Log -->
	<mx:UIComponent id="bootyMeterContainer" x="20" y="135"/>
	
	<!-- Animated Ship and Crane area -->
	<s:Group id="mGameArea" includeIn="TreasureHunt" x="120" y="121" width="395" height="286">
		<s:BorderContainer id="Sky" width="395" height="186"
						   borderVisible="false" depth="1">
			<s:SWFLoader id="CloudLoader" includeIn="TreasureHunt" complete="initClouds()" depth="2"
						 source="odyssey_assets/cloudHerder.swf"/>
		</s:BorderContainer>	
		<s:Rect id="Water" includeIn="TreasureHunt" x="0" y="186" width="395" height="100" depth="3"
				/>
		<s:SWFLoader id="CraneLoader" includeIn="TreasureHunt" x="0" y="0" width="395" height="286"
					 complete="initCrane()" depth="4" source="odyssey_assets/CraneAnimation.swf"/>
		<s:SWFLoader id="BoatLoader" includeIn="TreasureHunt" x="0" y="0" width="395" height="286"
					 complete="initBoat()" depth="5" source="odyssey_assets/BoatSailAnim.swf"/>
	</s:Group>
	<mx:UIComponent id="uic" x="120" y="121"/> <!--Note: this is used to place the animation masks and must be the same X and Y as 'mGameArea'-->
	<mx:UIComponent id="ratContainer" x="120" y="121" width="395" height="286"/> <!-- container to hold dots for rat animation demo-->
	<mx:UIComponent id="popUpContainer" x="0" y="0"/>

	<!-- Error message for bad version of flash player -->	
	<s:BorderContainer id="BrickWall" visible="false" x="0" y="0"
					   width="{GameScreen.TOTAL_SCREEN_WIDTH}"
					   height="{GameScreen.TOTAL_SCREEN_HEIGHT}" depth="999">
		<s:backgroundFill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0x13B3C2"/>
				<s:GradientEntry color="0x1E5B77"/>
			</s:LinearGradient>
		</s:backgroundFill>
		
		<s:Label id="topLabelError" x="0" y="70" width="{GameScreen.TOTAL_SCREEN_WIDTH}"
				 color="0xffffff" fontFamily="Georgia" fontSize="20" fontWeight="bold"
				 text="You are using an outdated version of Adobe Flash Player." textAlign="center"/>
		<s:Label id="midLabelError" x="0" y="160" width="{GameScreen.TOTAL_SCREEN_WIDTH}"
				 color="0xffffff" fontFamily="Georgia" fontSize="15"
				 text="{'Ship Odyssey requires Flash Player '+ MINIMUM_REQUIREMENTS +' or later.'}"
				 textAlign="center"/>
		<s:Label id="midLabel2Error" x="0" y="180" width="{GameScreen.TOTAL_SCREEN_WIDTH}"
				 color="0xffffff" fontFamily="Georgia" fontSize="15"
				 text="{'You are currently using Flash Player ' + VersionChecker.getVersion()}"
				 textAlign="center"/>
		<s:Button id="upgradeButton" x="{(GameScreen.TOTAL_SCREEN_WIDTH-350)/2}" y="250" width="350"
				  height="50" label="Upgrade Flash Player" click="VersionChecker.openAdobeWebsite()"
				  enabled="true" fontSize="25"/>
		<s:Button id="ignoreButton" x="{(GameScreen.TOTAL_SCREEN_WIDTH-350)/2}" y="310" width="350"
				  height="30" label="Ignore Warning" click="startUp()" enabled="true" fontSize="12"/>
	
	</s:BorderContainer>
	
</s:Application>
