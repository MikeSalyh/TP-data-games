<?xml version="1.0" encoding="utf-8"?>

<!-- ShipOdyssey.mxml -->
<!-- Copyright (c) 2011 by University of Massachusetts and contributors -->
<!-- Project information: http://srri.umass.edu/datagames/ -->
<!-- Released under the MIT License http://www.opensource.org/licenses/mit-license.php -->

<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   width="600" height="450" 
			   pageTitle="Ship Odyssey" 
			   currentState="StartPage" 
			   backgroundColor.TreasureHunt="#294867"
			   creationComplete="startUp()">
	<fx:Style source="ShipOdyssey.css"/>

	<fx:Script>
		<![CDATA[
			import assets.*;
			
			import com.kcpt.scriptInterface.ScriptInterface;
			
			import common.MathUtilities;
			import common.ParkMiller;
			
			import mx.core.SoundAsset;
			import mx.flash.UIMovieClip;
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import odyssey.TreasureHuntLevelWindow;
			
			// ********** TREASURE HUNT CONSTANTS AND VARIABLES **********
			public static const kHuntLevelOne:uint = 0;	// First treasure hunt game level.
			public static const kHuntLevelTwo:uint = 1;	// Second treasure hunt game level.
			public static const kMaxRats:uint	= 500;	// Number of rats available per Treasure Hunt Game.
			public static const kMinRats:uint	= 1;	// Default minimum number of rats to send.
			public static const kRatsToSend:uint= 1;	// Default number of rats to send.
			public static const kCostPerRat:uint= 100;	// Cost per rat in dollars.
			public static const kMaxDays:uint	= 28;	// Initial number of days given to find all treasures.
			public static const kDaysToDropHook:uint = 1;	 // Number of days used dropping the grappling hook.
			public static const kDaysToNextTreasure:uint = 4;// Number of days to sail to next treasure.
			public static const kCostPerDay:uint=3000;	// Cost for crew and ship per day in dollars.
			public static const kInitCenter:Number = 50;// Starting center position of grappling hook.
			public static const kHookCenterPrecision:int = 2;// Number of digits past the decimal to which center is rounded.
			public static const kHookRadius:uint= 2;	// Radius of grappling hook area.
			public static const kNumTreasures:uint = 6;	// Number of treasures to find.
			public static const kTreasureID:uint= 0;	// Array position of categorical treasure ID.
			public static const kLocation:Number= 1;	// Array position of treasure location.
			public static const kValue:uint		= 2;	// Array position of treasure value.
			public static const kMoneyBag:uint	= 3;	// Array position of money bag image for treasure.
			public static const kItem:uint		= 4;	// Array position of treasure item.
			public static const kMinLocation:Number = 0;	// Leftmost treasure location.
			public static const kMaxLocation:Number = 100;	// Rightmost treasure location.
			public static const kStdDeviationClear:Number = 10;// Standard deviation of rat results in clear water.
			public static const kStdDeviationMurky:Number = 15;// Standard deviation of rat results in murky water.
			public static const kWelcomeText:String = "Ahoy!!! Find ye treasure here. Send down some rats as scouts to see where the treasure lies. Then take yer chances and drop the hook!";
			public static const kNoRatsText:String	= "Arrr!!! Ye have lost all yer rats, but fear ye not! Try yer hand at the hook to gather ye some treasure. Bounty awaits ye!";
			public static const kMissed:String		= "Arrr!!! Ye have found no treasure here and lost a day fer yer trouble.";
			public static const kInSearchOf:String	= "In search of treasure #";
				
			private var mStdDeviation:Number= kStdDeviationClear;	// Standard deviation of rat results.
			private var mLevelWindow:TreasureHuntLevelWindow;// The modal window for choosing a treasure hunt level.
			private var mHuntLevel:uint		= 0;			// Current hunt level.
			private var mPrevHuntLevel:uint	= 0;			// Used to track hunt level changes.
[Bindable]	private var mRatsLeft:uint		= kMaxRats;		// Rats left during current treasure hunt game.
			private var mRatsToSend:uint	= kRatsToSend;	// Rats to send at one time.
			private var mRandomNormal:ParkMiller;			// Class that creates a normal distribution.
			private var mMathUtils:MathUtilities = new MathUtilities();			// Class that uses SRRI math functions.
			private var mFirstRat:Boolean	= true;			// Is this the first rat sent looking for next treasure?
[Bindable]	private var mDaysLeft:uint		= kMaxDays;		// Days left to find treasure.
			private var mCenterPosition:Number= kInitCenter;	// Center position of grappling hook.
			private var mMinHookRange:Number	= mCenterPosition - kHookRadius;	// Left edge of hook's grasp.
			private var mMaxHookRange:Number	= mCenterPosition + kHookRadius;	// Right edge of hook's grasp.
			private var mCurrentTreasureNum:uint = 0;		// Starting treasure in zero-based array.
			private var mTreasuresFound:uint= 0;			// Treasures found so far in current game.
			private var mTreasureValueSoFar:uint = 0;		// Cumulative value of treasures found in current game.
			private var mRatCostSoFar:uint = 0;				// Cumulative value of rat cost in current game.
			private var mShipCostSoFar:uint = 0;			// Cumulative value of ship/crew cost in current game.
			private var mProfitSoFar:int	= 0;			// Profit so far in current game.
			private var mEventNumber:uint	= 0;			// Number of current event in current game (rat(s) sent or hook dropped), begining with 1.
			private var mGameNumber:uint	= 0;			// Number of current game, begining with 1.
			private var mRatsSent:uint		= 0;			// Number of rats already sent in current game.
			private var mHooksDropped:uint	= 0;			// Number of hooks already dropped in current game.
			private var mCurrentGameComplete:Boolean = false;// Has current game been won or lost yet?
			private var mFoundTreasure:Boolean = false; 	// Has the current hook drop found this treasure?
			
			// These arrays store the details of individual treasures.
			private var mTreasure0:Array;
			private var mTreasure1:Array;
			private var mTreasure2:Array;
			private var mTreasure3:Array;
			private var mTreasure4:Array;
			private var mTreasure5:Array;

			// Array of treasures (zero-based).
			private var mTreasureArray:Array;
			
			// Array of numberic hook drop order (1st, 2nd, 3rd, etc.)
			private var mHookDropOrderArray:Array;
			
			// ********** END OF TREASURE HUNT CONSTANTS AND VARIABLES **********
			
			// Embed the start screen pirate ship graphic.
			// From http://www.rw-designer.com/cursor-download.php?id=2222 on 12/11/2010.
			// Cursor details are at: http://www.rw-designer.com/cursor-detail/2222
			//   "Published on August 14th 2007 by The Sword of the Heart."
			//   "Released under the Attribution Required (CC by) license."
			//   "Creative Commons - Attribution" see http://www.rw-designer.com/licenses
			// Converted from .eps format to .jpg.
			[Embed(source="../assets/Pirate Ship 600 x 450.png")]
			[Bindable]
			private var mPirateShipImage:Class;
			
			// ********** TREASURE HUNT IMAGES **********
			
			// Embed the scroll paper in the Treasure Hunt game.
			// Made this placeholder by hand, as original scroll came from a web site that 
			// required explicit permission to use images.
			[Embed(source="../assets/Long Results Box with Mask.png")]
			[Bindable]
			private var mScrollImage:Class;

			// Embed the money bag in the Treasure Hunt game.
			// Image is from Microsoft Word 2007 clip art on 3/28/2011.
			// Modified by scaling, flipping, reflipping the "$," and saving as jpg.
			[Embed(source="../assets/Money Bag Modified.jpg")]
			[Bindable]
			private var mMoneyBagImage:Class;
			
			// Embed the pirate head in the Treasure Hunt game.
			// Image is from Microsoft Word 2007 clip art on 3/28/2011.
			// Modified by scaling, creating a background mask, and saving as png.
			[Embed(source="../assets/Pirate Head.png")]
			[Bindable]
			private var mPirateHeadImage:Class;
			
			// Embed the parchment image in the Treasure Hunt game.
			// Parchment image is from http://www.clker.com/clipart-15930.html on 4/4/2011.
			// From http://www.clker.com/disclaimer.html
			//   "Clker.com is owned by Rolera LLC, an Illinois Limited Liability Corporation." 
			//   "Clker and Clker.com are trademarks of Rolera LLC."
			//   "Clker.com is an online sharing service where users share free public domain" 
			//   "vector cliparts, or share public domain photos and derive vector cliparts"
			//   "from those photos using clker's online tracer."
			[Embed(source="../assets/Parchment.png")]
			[Bindable]
			private var mParchmentImage:Class;
			
			// Embed the All Treasures Found image in the Treasure Hunt game.
			// Parchment image is from http://www.clker.com/clipart-15930.html on 4/4/2011.
			// From http://www.clker.com/disclaimer.html
			//   "Clker.com is owned by Rolera LLC, an Illinois Limited Liability Corporation." 
			//   "Clker and Clker.com are trademarks of Rolera LLC."
			//   "Clker.com is an online sharing service where users share free public domain" 
			//   "vector cliparts, or share public domain photos and derive vector cliparts"
			//   "from those photos using clker's online tracer."
			// Modified by adding text in Photoshop CS5.
			[Embed(source="../assets/All Treasures Found.png")]
			[Bindable]
			private var mAllTreasuresFoundImage:Class;
			
			// Embed the Time Up and Treasures Found image in the Treasure Hunt game.
			// Parchment image is from http://www.clker.com/clipart-15930.html on 4/4/2011.
			// From http://www.clker.com/disclaimer.html
			//   "Clker.com is owned by Rolera LLC, an Illinois Limited Liability Corporation." 
			//   "Clker and Clker.com are trademarks of Rolera LLC."
			//   "Clker.com is an online sharing service where users share free public domain" 
			//   "vector cliparts, or share public domain photos and derive vector cliparts"
			//   "from those photos using clker's online tracer."
			// Modified by adding text in Seashore on Mac.
			[Embed(source="../assets/Time Up and Treasures Found.png")]
			[Bindable]
			private var mTimeRanOutImage:Class;
			
			// Embed the Congratulations image in the Treasure Hunt game.
			// Parchment image is from http://www.clker.com/clipart-15930.html on 4/4/2011.
			// From http://www.clker.com/disclaimer.html
			//   "Clker.com is owned by Rolera LLC, an Illinois Limited Liability Corporation." 
			//   "Clker and Clker.com are trademarks of Rolera LLC."
			//   "Clker.com is an online sharing service where users share free public domain" 
			//   "vector cliparts, or share public domain photos and derive vector cliparts"
			//   "from those photos using clker's online tracer."
			// Modified by adding text in Seashore on Mac.
			[Embed(source="../assets/Congratulations.png")]
			[Bindable]
			private var mCongratulationsImage:Class;

			// Embed the NoTreasuresFound image in the Treasure Hunt game.
			// Parchment image is from http://www.clker.com/clipart-15930.html on 4/4/2011.
			// From http://www.clker.com/disclaimer.html
			//   "Clker.com is owned by Rolera LLC, an Illinois Limited Liability Corporation." 
			//   "Clker and Clker.com are trademarks of Rolera LLC."
			//   "Clker.com is an online sharing service where users share free public domain" 
			//   "vector cliparts, or share public domain photos and derive vector cliparts"
			//   "from those photos using clker's online tracer."
			// Modified by adding text in Seashore on Mac.
			[Embed(source="../assets/No Treasures Found.png")]
			[Bindable]
			private var mNoTreasuresFoundImage:Class;

			// Embed the cash earned sound in the Treasure Hunt game.
			// New Cash register sound by Benboncan (only modification is converted to MP3)
			// Downloaded from http://www.freesound.org/people/Benboncan/sounds/91924/ on Feb 7, 2012
			// Licensed under the attribution license (http://creativecommons.org/licenses/by/3.0/)
			[Embed(source="../assets/91924-benboncan-till-with-bell.mp3")]
			private var CashMP3:Class;
			private var mCashSound:SoundAsset = new CashMP3() as SoundAsset;
			
			// Embed the rat squeal sound in the Treasure Hunt game.
			// The link from which the sound came no longer exists as of 10/28/2011. The larger
			// web site from which the sound came redirects to another site.
			// A similar rat sound on on the new site requires login to hear. The official web
			// site of those sounds creator lists rats sounds for a price.
			// Modified by shortening clip in Audacity on Mac.
//			[Embed("../src/assets/Rat Sound.mp3")]
//			private var RatMP3:Class;
//			private var mRatSound:SoundAsset = new RatMP3() as SoundAsset;
			
			// ********** END OF TREASURE HUNT IMAGES **********

			// startUp() is called when the creation of this class is complete
			// and sets up necessary parameters for game initiation.
			private	function startUp():void	
			{
				mRandomNormal	= new ParkMiller();		// Create class that generates a normal distribution.
				
				// Create rat collection.
				ScriptInterface.NewCollectionWithAttributes(
					"Events",
					[
						"Game_Number",		// Treasure hunt game number starting with 1 since launch of application.
						"Ocean_Quality",	// Clear or murky, based on hunt level chosen.
						"Rats_Sent",		// Rats sent so far in current game.
						"Rat_Reading",		// Location estimate provided by rat.
						"Drop_Order",		// Hooks dropped so far in current game.
						"Drop_Location",	// Location of hook center at time of event.
						"Drop_Result",		// Outcome of dropping hook (None, Miss, Hit, etc.).
						"Treasure_Sought",	// Categorical treasure ID (1-based) at time of event.
						"Treasure_Location"// Exact location of treasure found at time of event
					]
				);
				// Create game collection.
				ScriptInterface.NewCollectionWithAttributes(
					"Games",
					[
						"Game_Number",		// Treasure hunt game number starting with 1 since launch of application.
						"Ocean_Quality",	// Clear or murky, based on hunt level chosen.
						"Total_Rats_Sent",	// Total number of rats sent during current game.
						"Total_Drops",		// Number of times hook was dropped during current game.
						"Treasures_Found",	// Number of treasures found during current game.
						"Journey_Time",		// Number of days used to complete treasure hunt game.
						"Profit"			// Value of (treasures found) minus (crew/ship costs and rat costs).
					]
				);
			}
			
			// switchToTreasureHunt() sets the current state to the Treasure Hunt game
			// screen and initializes the game.
			protected function switchToTreasureHunt(iEvent:MouseEvent):void
			{
				currentState='TreasureHunt';	// Switch to Treasure Hunt screen.
				
				// Create a  game level modal dialog.
				// Listen for clicks on level buttons in dialog.
				mLevelWindow = new TreasureHuntLevelWindow();
				
				chooseHuntLevel(); // Make the user select a hunt level and return.
				
				initializeTreasureHunt();
			}
			
			// ********** TREASURE HUNT FUNCTIONS **********
			
			// initializeTreasureHunt() sets the Treasure Hunt game to initial values
			// and prepares the game for play.
			protected function initializeTreasureHunt():void
			{
				disableAllButtons(true);
				mGameNumber 			+= 1;	// Count current game.
				mEventNumber			= 0;	// Don't count events until they occur (rat(s) sent or hook dropped).	
				mRatsSent				= 0;	// Reset number of rats sent.
				mHooksDropped			= 0;	// Reset number of hooks dropped.
				mCurrentGameComplete	= false;// Game is in play.
				
				// Create the numeric hook drop order array.
				mHookDropOrderArray = new Array(	"0th", "1st", "2nd", "3rd", "4th", "5th", "6th", "7th", "8th", "9th",
													"10th", "11th", "12th", "13th", "14th", "15th", "16th", "17th", "18th", "19th",
													"20th", "21st", "22nd", "23rd", "24th", "25th", "26th", "27th", "28th", "29th");
				
				// Set up the treasure location, value, money bag image, and item.
				mTreasure0 = new Array("1st", randomLocation(), 10000, mMoneyBag0, "Brass Chalice");
				mTreasure1 = new Array("2nd", randomLocation(), 20000, mMoneyBag1, "Sword with Ebony Handle");
				mTreasure2 = new Array("3rd", randomLocation(), 30000, mMoneyBag2, "Pearl Necklace");
				mTreasure3 = new Array("4th", randomLocation(), 40000, mMoneyBag3, "Silver Goblet");
				mTreasure4 = new Array("5th", randomLocation(), 50000, mMoneyBag4, "Gold Bar");
				mTreasure5 = new Array("6th", randomLocation(), 60000, mMoneyBag5, "Diamond Ring");
				
				// Create new log array and add log/logtop to array.
				mTreasureArray = new Array(	mTreasure0, mTreasure1, mTreasure2, 
					mTreasure3, mTreasure4, mTreasure5);

				mCurrentTreasureNum 		= 0;	// Player begins looking for first treasure.
				mTreasuresFound				= 0;	// No treasures found yet.
				mTreasureValueSoFar			= 0;	// No value earned until treasures are found.
				mRatCostSoFar				= 0;	// No rats have been used yet, so no cost yet.
				mShipCostSoFar				= 0;	// No ship / crew costs until trip starts.
				mProfitSoFar				= 0;	// No profit until costs & treasures accrue.
				mFirstRat					= true;	// Next rat sent will be the first.

				// Set number of rats left to full amount.
				mRatsLeft					= kMaxRats;	
				//mRatsLeftValueLabel.text 	= mRatsLeft.toString();
				//mRatProgressBar.setProgress(mRatsLeft, mRatProgressBar.maximum); 
				
				mRatStepper.maximum	= kMaxRats;	//Set maximum rats-to-send to the full number of rats.
				mRatStepper.minimum	= kMinRats;	//Set minimum rats-to-send to default.
				
				// Set intial number of rats to send.
				mRatsToSend			= kRatsToSend;
				mRatStepper.value	= mRatsToSend;
				
				mResultsFieldLabel.text	= "";		// Clear rat results.
				mHintLabel.text = kWelcomeText;		// Welcome the player.
				
				// Enable controls.
				//mStartHuntButton.enabled		= true;
				//mDropHookButton.enabled			= true;
				//mSendRatsButton.enabled			= true;
				//mCenterPositionStepper.enabled	= true;
				//mRatStepper.enabled				= true;
				
				// Move hook to center of treasure area.
				mCenterPosition				= kInitCenter;	
				mCenterPositionStepper.value= mCenterPosition;					// Set stepper to center position.
				mMinHookRange				= mCenterPosition - kHookRadius;	// Left edge of hook's grasp.
				mMaxHookRange				= mCenterPosition + kHookRadius;	// Right edge of hook's grasp.
				mRangeValueLabel.text		= mMinHookRange.toFixed(1) + " - " + mMaxHookRange.toFixed(1);
				
				// Hide money bag images. They will be shown as player finds each treasure.
				mMoneyBag0.visible = false;
				mMoneyBag1.visible = false;
				mMoneyBag2.visible = false;
				mMoneyBag3.visible = false;
				mMoneyBag4.visible = false;
				mMoneyBag5.visible = false;
				
				// Set number of treasure sought to first.
				mInSearchOfLabel.text = kInSearchOf + (mCurrentTreasureNum + 1).toString();
				
				// Set profit value to intial amount.
				mProfitValue.text	= formatDollars(mProfitSoFar);
				
				// Hide all parchment announcements until they are needed.
				mAllTreasuresFoundAlert.visible	= false;
				mTimeRanOutAlert.visible		= false;
				mCongratulationsAlert.visible	= false;
				mNoTreasuresFoundAlert.visible	= false;
				
				mTreasuresFoundLabel.visible	= false;
				mSomeTreasuresFoundLabel.visible= false;
				
				//mStartHuntButton.enabled	= false;	// Disable start button, as game has begun.
				//mSailOnButton.enabled		= true;		// Player can skip current treasure and sail to next.
				
				// Set days left to find treasure to full amount.
				mDaysLeft					= kMaxDays;	
				//mDaysRemainingValue.text 	= mDaysLeft.toString();
			}
			
			// chooseHuntLevel() listens for clicks on the hunt level dialog's level buttons.
			private function chooseHuntLevel():void 
			{
				var isModal:Boolean = true;
				PopUpManager.addPopUp(mLevelWindow, this, isModal); 
				
				PopUpManager.centerPopUp(mLevelWindow);		// Center the window.
				mLevelWindow.closeButton.visible = false;	// Hide the close button.
				
				mLevelWindow["mLevelOneButton"].addEventListener("click", firstHuntLevel);   
				mLevelWindow["mLevelTwoButton"].addEventListener("click", secondHuntLevel);   
			}
			
			// gameLevelChosen() sets the current game level to the value passed in and closes the modal dialog.
			private function huntLevelChosen(iLevel:uint):void 
			{
				mHuntLevel = iLevel; // Set game level to input value.	
				PopUpManager.removePopUp(mLevelWindow);
				
				sailThenZoomIn();
				//sailingMovie.doZoomIn();
			}
			
			// firstHuntLevel() sets the current hunt level to the first level.
			private function firstHuntLevel(iEvent:Event):void 
			{
				mPrevHuntLevel = mHuntLevel;		// Track game level change.
				// Set background image and standard deviation that fit with game level.
				//mTreasureHuntGameArea.source	= mTreasureHuntImage;
				mStdDeviation					= kStdDeviationClear;
				Water.fill = clearWater;
				Sky.backgroundFill = daylight;
				huntLevelChosen(kHuntLevelOne); // Set game level to first level.
			}
			
			// secondHuntLevel() sets the current hunt level to the second level.
			private function secondHuntLevel(iEvent:Event):void 
			{
				mPrevHuntLevel = mHuntLevel;		// Track game level change.
				// Set background image and standard deviation that fit with game level.
				//mTreasureHuntGameArea.source	= mTreasureHuntMurkyImage;
				mStdDeviation					= kStdDeviationMurky;
				Water.fill = murkyWater;
				Sky.backgroundFill = darkDay;
				cHerder.init(5,395,0x999999);
				cHerder.startClouds();
				huntLevelChosen(kHuntLevelTwo); // Set game level to second level.
			}
			
			// getOceanQuality() returns a string descibing the ocean quality based on the hunt level
			protected function getOceanQuality():String
			{
				switch (mHuntLevel)
				{
					case kHuntLevelOne:
						return "Clear";
					case kHuntLevelTwo:
						return "Murky";
					default:
						return "";
				}
			}
			
			// formatDollars() adds the dollar sign to the input value, which may be negative.
			protected function formatDollars(iDollars:int):String
			{
				// Add the $ sign, comma(s), and cents.
				var withCents:String = usdFormatter.format(iDollars);
				
				// Strip out the cents before returning the currency string.
				var splitArray:Array = withCents.split(usdFormatter.decimalSeparatorFrom);
				return splitArray[0];
			}

			// randomLocation() creates a new location on the ocean floor based on a uniform
			// distribution.
			protected function randomLocation():Number
			{
				return ((kMaxLocation - kMinLocation) * mRandomNormal.uniform()) + kMinLocation;
			}
			
			// treasuresFoundString() returns a formatted string saying how many treasures were found out
			// of the total number of treasures available.
			protected function treasuresFoundString():String
			{
				return "Ye found " + mTreasuresFound + " of the " + kNumTreasures + " treasures!";
			}
			
			// onClickStartHuntButton() is called when the Start button in the
			// Treasure Hunt game is pressed.
			protected function onClickStartHuntButton(iEvent:MouseEvent):void
			{
				// Disable Start button while game is in play.
				//mStartHuntButton.enabled	= false;
				//mSailOnButton.enabled		= true;		// Player can skip current treasure and sail to next.
				initializeTreasureHunt();
			}
			
			// onClickSendRatsButton() is called when the Send Rats button is
			// pressed.
			protected function onClickSendRatsButton(event:MouseEvent):void
			{
				// Clear hint text next to pirate head.
				mHintLabel.text = "";		
				
				mEventNumber += 1;	// Sending rats counts as an event.
				
				// Calculate and display how many rats are left.
				mRatsLeft -= mRatsToSend;	
				//mRatsLeftValueLabel.text = mRatsLeft.toString();
				//mRatProgressBar.setProgress(mRatsLeft, mRatProgressBar.maximum); 
				
				// Update the cumulative cost of rats sent and profit so far.
				mRatCostSoFar		+= kCostPerRat * mRatsToSend;
				mProfitSoFar		-= kCostPerRat * mRatsToSend;
				mProfitValue.text	= formatDollars(mProfitSoFar);
				
//				mRatSound.play(); // Play rat sound.
				
				// For every rat sent...
				for (var ratNum:uint = 0; ratNum < mRatsToSend; ++ratNum)
				{
					mRatsSent += 1;	// Increment rat counter.
					
					// Generate a noisy result based on the current treasure's location.
					var location:Number		= mTreasureArray[mCurrentTreasureNum][kLocation];
					var noisyLocation:Number= Math.round((mRandomNormal.standardNormal() * mStdDeviation) + location);

					// Add results of what the rats find to the results field.
					if (mFirstRat)
					{
						// If first rat, dont add punctuation.
						mResultsFieldLabel.text += noisyLocation; // Display nothing after decimal point.
						mFirstRat = false;
					}
					else
						// All successive results should add comma delimiters.
						mResultsFieldLabel.text += ", " + noisyLocation; // Display nothing after decimal point.
					
					// Send event data to TinkerPlots / Fathom.
					sendEventData("Rat", noisyLocation.toString());
					/*ScriptInterface.AddCaseToCollectionWithValues(
						"Events", 
						[
							mGameNumber,			// Treasure hunt game number starting with 1 since launch of application.
							getOceanQuality(),		// Clear or murky, based on hunt level chosen.
							mRatsSent,				// Rats sent so far in current game.
							noisyLocation,			// Location estimate provided by rat.
							"",						// Hooks dropped so far in current game. Blank for rat events.
							"",						// Location of hook center at time of event.
							"",		 				// Outcome of dropping hook. Blank for rat events.
							mTreasureArray[mCurrentTreasureNum][kTreasureID],		
													// Categorical treasure ID (1-based) at time of event.
							""						// Exact location of treasure found at time of event
						]	
					);*/
				}
				
				// Set maximum rats-to-send to the number of rats left.
				// Adjust rat stepper to comply with any changes.
				mRatStepper.maximum	= mRatsLeft;
				if (mRatsToSend > mRatsLeft)
				{
					mRatsToSend			= mRatsLeft;	// Can't send more rats than there are!
					
					// If there are not enough rats left to send the default minimum, allow 
					// mimimum rats-to-send to drop below default minimum.
					if (mRatsToSend < mRatStepper.minimum) mRatStepper.minimum = mRatsToSend;
					
					mRatStepper.value	= mRatsToSend;	// Set the stepper to reflect changes.
				}
				
				// Disable Send Rats button if there are no more rats left after sending.
				if (mRatsToSend == 0)
				{
					mSendRatsButton.enabled = false;
					mHintLabel.text = kNoRatsText;		// Tell the player.
				}
			}
			
			// onChangeCenterPosition() is called when the value of the hook's
			// center position is changed.
			protected function onChangeCenterPosition(event:Event):void
			{
				// Update the hook's range based on the center position.
				//mCenterPositionStepper.value = mMathUtils.setPrecision(mCenterPositionStepper.value, kHookCenterPrecision);
				mCenterPosition			= mCenterPositionStepper.value;
				mMinHookRange			= mCenterPosition - kHookRadius;	// Left edge of hook's grasp.
				mMaxHookRange			= mCenterPosition + kHookRadius;	// Right edge of hook's grasp.
				mRangeValueLabel.text	= mMinHookRange.toFixed(1) + " - " + mMaxHookRange.toFixed(1);
				crane.runTo(mCenterPosition);
			}
			
			// onChangeRatStepper() is called when the number of rats to be sent
			// is changed.
			protected function onChangeRatStepper(event:Event):void
			{
				// Update number of rats to be sent at one time.
				mRatsToSend = mRatStepper.value;
			}
			
			// onClickDropHookButton() is called when the Drop Hook button is
			// pressed and handles all actions assiociated with attempting to
			// retrieve treasure at the specified location.
			protected function onClickDropHookButton(event:MouseEvent):void
			{
				// Clear hint text next to pirate head.
				mHintLabel.text = "";		
				mEventNumber 				+= 1; // Dropping a hook counts as an event.
				mHooksDropped 				+= 1; // Increment counter of hooks dropped.
				
				// Set days left to find treasure.
				mDaysLeft 					-= kDaysToDropHook;	
				//mDaysRemainingValue.text 	= mDaysLeft.toString();
				
				// Update the cumulative cost of using the ship and crew as well as the profit so far.
				mShipCostSoFar		+= kCostPerDay * kDaysToDropHook;
				mProfitSoFar		-= kCostPerDay * kDaysToDropHook;
				mProfitValue.text	= formatDollars(mProfitSoFar);
				
				// Show another treasure if the hook was dropped on the current location.
				var location:Number = mTreasureArray[mCurrentTreasureNum][kLocation];
				mFoundTreasure = (location >= mMinHookRange && location <= mMaxHookRange);
				dropHook();
			}
			
			//call the animation, disable all buttons during animation, and start a timer
			private function dropHook():void{
				disableAllButtons(false);
				crane.dropHook(mFoundTreasure, 1, 5);
				transitionTimer = new Timer(5000, 1);
				transitionTimer.addEventListener(TimerEvent.TIMER_COMPLETE, hookDropTimerFinish);
				transitionTimer.start();
			}
			//return from dropHook()::transitionTimer.start()
			protected function hookDropTimerFinish(e:TimerEvent):void{
				//does the visual and sound items that occur after the hook drop finishes playing
				//or as the item on the hook comes into view
				transitionTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, hookDropTimerFinish);
				enableAllButtons();
				var location:Number = mTreasureArray[mCurrentTreasureNum][kLocation];
				if (mFoundTreasure)
				{
					// Show money bag image on treasure scroll to indicate player has earned it.
					// Add treasure value to accumulated wealth.
					mTreasureArray[mCurrentTreasureNum][kMoneyBag].visible = true;
					mTreasureValueSoFar += mTreasureArray[mCurrentTreasureNum][kValue];
					mProfitSoFar		+= mTreasureArray[mCurrentTreasureNum][kValue];
					mProfitValue.text	= formatDollars(mProfitSoFar);
					
					mCashSound.play(); // Play cash register sound.	
					// Tell the player which treasure was found and how much it is worth.
					var valueInDollars:String = usdFormatter.format(mTreasureArray[mCurrentTreasureNum][kValue]);
					mHintLabel.text = 
						"Ye found the " + mTreasureArray[mCurrentTreasureNum][kItem] + " worth " + valueInDollars 
						+ " at location " + location.toFixed(1) + "!";	
					// Send event data to TinkerPlots / Fathom.
					sendEventData("Hook", "Hit");
					// Increment treasure number and update text indicating which treasure is sought.
					mCurrentTreasureNum++;	
					mTreasuresFound++;		
					mInSearchOfLabel.text = kInSearchOf + (mCurrentTreasureNum + 1).toString(); 
					mResultsFieldLabel.text	= "";	// Clear rat results.
					mFirstRat				= true;	// Recount rats used per treasure.	
					if (mCurrentTreasureNum == kNumTreasures)
					{	// Player found final treasure. Disable treasure hunt controls.
						disableAllButtons(false);
						noDaysLeft();
					}
					else	// Take time to sail to next treasure.
					{						
						if (mDaysLeft >= kDaysToNextTreasure)
						{
							updateProfitAfterSail();
						}
						else mDaysLeft = 0;//BINDABLE variable self updates text field
					}
				}
				else // Treasure was not found at drop location.
				{
					mHintLabel.text = kMissed;
					// Send event data to TinkerPlots / Fathom.
					sendEventData("Hook", "Miss");
				}
				
				// Disable the Drop Hook Button if there are not enough days left
				// to drop the hook again. Game is done.
				if (mDaysLeft < kDaysToDropHook)
				{
					// Player ran out of time. Disable treasure hunt controls.
					disableAllButtons(false);
					noDaysLeft();
				}
			}
			
			// onClickExitTreasureHunt() sets the current state to the Treasure Hunt game
			// screen and initializes the game.
			protected function onClickExitTreasureHunt(iEvent:MouseEvent):void
			{
				// If player pressed exit before completing game, send game data to TinkerPlots / Fathom.
				if (!mCurrentGameComplete){
					sendGameData();	
				}
				mCurrentGameComplete = true;// Game is now complete.	
				currentState='StartPage';	// Return to start screen.
			}

			// onClickSailOnButton() makes the ship set sail for the next treasure.
			protected function onClickSailOnButton(iEvent:MouseEvent):void
			{
				disableAllButtons(true);
				runSailOnAnim();
				mResultsFieldLabel.text	= "";	// Clear rat results.
				mFirstRat				= true;	// Recount rats used per treasure.		
				// End game if there are no treasures left after currently sought treasure.
				if ((mCurrentTreasureNum + 1) >= kNumTreasures) // mCurrentTreasureNum is zero-based.
				{	
					// Clear text saying which treasure is sought.
					mInSearchOfLabel.text = ""; 
					// If game isn't already over, send game data to TinkerPlots / Fathom.
					if (mCurrentGameComplete == false)
						sendGameData();
					// Tell the player the game is over.
					mCurrentGameComplete = true;// Game is complete.	
				}
				else // There are still treasures left after current treasure, so sail on!
				{
					mCurrentTreasureNum++; // Increment current treasure counter.	
					// Update label indicating treasure sought.
					mInSearchOfLabel.text = kInSearchOf + (mCurrentTreasureNum + 1).toString(); 
					// Disable the Drop Hook Button if there were not enough days left
					// to sail to the next treasure. Game is done.
					if (mDaysLeft < kDaysToNextTreasure)
					{
						updateProfitAfterSail();
						noDaysLeft();
					}
					else // There were enough days left to sail to the next treasure.
					{
						updateProfitAfterSail();
						// Disable the Drop Hook Button if there are not enough days left
						// to drop the hook again. Game is done.
						if (mDaysLeft < kDaysToDropHook)
						{
							noDaysLeft();
						}
					}
				}
			}
			
			private function updateProfitAfterSail():void{
				//set days left to find treasure
				mDaysLeft = Math.max(0, mDaysLeft-kDaysToNextTreasure);
				//update the cumulative cost of using the ship and crew as well as the profit so far
				mShipCostSoFar += kCostPerDay * kDaysToNextTreasure;
				mProfitSoFar -= kCostPerDay * kDaysToNextTreasure;
				mProfitValue.text = formatDollars(mProfitSoFar);
			}
			
			private function noDaysLeft():void{
				// Tell the player the game is over.
				if (mTreasuresFound) // At least one treasure was found.
				{
					mCongratulationsAlert.visible	= true;
					mTreasuresFoundLabel.text		= treasuresFoundString();
					mTreasuresFoundLabel.visible	= true;
				}else{ // No treasures were found.
					mNoTreasuresFoundAlert.visible	= true;
				}
				// Clear text saying which treasure is sought.
				mInSearchOfLabel.text = ""; 
				// If game didn't already end when hook dropped, send game data to TinkerPlots / Fathom.
				if (mCurrentGameComplete == false)
					sendGameData();
				mCurrentGameComplete = true;// Game is complete.
			}
		
			// ********** END OF TREASURE HUNT FUNCTIONS **********
			//*****NEW FUNCTIONS*****
			
			private function sendGameData():void{
				ScriptInterface.AddCaseToCollectionWithValues(
					"Games",
					[
						mGameNumber,		 // Treasure hunt game number starting with 1 since launch of application.
						getOceanQuality(),	 // Clear or murky, based on hunt level chosen.
						mRatsSent,			 // Total number of rats sent during current game.
						mHooksDropped,		 // Number of times hook was dropped during current game.
						mTreasuresFound, 	 // Number of treasures found during current game.
						kMaxDays - mDaysLeft,// Number of days used to complete treasure hunt game.
						mProfitSoFar		 // Value of (treasures found) minus (crew/ship costs and rat costs).
					]
				);
			}
			private function sendEventData(type:String, val:String):void{
				if(type=="Hook"){
					ScriptInterface.AddCaseToCollectionWithValues(
						"Events", 
						[
							mGameNumber,			// Treasure hunt game number starting with 1 since launch of application.
							getOceanQuality(),		// Clear or murky, based on hunt level chosen.
							"",						// Rats sent so far in current game. Blank for hook drop events.
							"",						// Location estimate provided by rat.
							mHookDropOrderArray[mHooksDropped], // Hooks dropped so far in current game.
							mCenterPosition.toFixed(1),			// Location of hook center at time of event.
							val,		 			// Outcome of dropping hook None, Miss, Hit, etc.).
							mTreasureArray[mCurrentTreasureNum][kTreasureID],		
							// Categorical treasure ID (1-based) at time of event.
							""						// Exact location of treasure found at time of event
						]	
					);
				}else if (type=="Rat"){
					ScriptInterface.AddCaseToCollectionWithValues(
						"Events", 
						[
							mGameNumber,			// Treasure hunt game number starting with 1 since launch of application.
							getOceanQuality(),		// Clear or murky, based on hunt level chosen.
							mRatsSent,				// Rats sent so far in current game.
							val,					// Location estimate provided by rat.
							"",						// Hooks dropped so far in current game. Blank for rat events.
							"",						// Location of hook center at time of event.
							"",		 				// Outcome of dropping hook. Blank for rat events.
							mTreasureArray[mCurrentTreasureNum][kTreasureID],		
													// Categorical treasure ID (1-based) at time of event.
							""						// Exact location of treasure found at time of event
						]	
					);
				}
			}
			//group function calls for state changes for different events
			private function runSailOnAnim():void{
				disableAllButtons(false);
				transitionTimer = new Timer(2000, 1); //timer is in milliseconds
				transitionTimer.addEventListener(TimerEvent.TIMER_COMPLETE, craneStored);
				crane.tweenTo(100, 2);//turn to frame 100 in 2 secs
				transitionTimer.start();
			}
			private function sailThenZoomIn():void{
				cHerder.setCloudSpeed(.5);
				transitionTimer = new Timer(4000, 1);
				transitionTimer.addEventListener(TimerEvent.TIMER_COMPLETE, zoomOutTimerFinish);
				transitionTimer.start();
			}
			//called by the continue button after showing the user they got a treasure
			//not implemented yet
			private function sailNextTreasure(e:Event):void{
				
				
			}
			//timer response functions for running the game (will inline them near where they go as it makes sense)
			//(decouples visual with state and play so a broken animation doesn't stop play)
			private function craneStored(e:TimerEvent):void{
				//crane is stored and ready to zoom out
				transitionTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, craneStored);
				transitionTimer = new Timer(6000, 1); //timer is in milliseconds
				transitionTimer.addEventListener(TimerEvent.TIMER_COMPLETE, zoomOutTimerFinish);
				sailingMovie.visible = true;
				crane.visible = false;
				sailingMovie.doZoomOut();
				transitionTimer.start()
			}
			private function zoomOutTimerFinish(e:TimerEvent):void{
				transitionTimer.removeEventListener(TimerEvent.TIMER_COMPLETE, zoomOutTimerFinish);
				if(mCurrentGameComplete){
					//finish and show end screen
					noDaysLeft();
				}else{
					//zoom back in
					cHerder.setCloudSpeed(1.0);
					transitionTimer = new Timer(4500, 1);
					transitionTimer.addEventListener(TimerEvent.TIMER_COMPLETE, zoomInTimerFinish);
					sailingMovie.doZoomIn();
					transitionTimer.start()
				}
			}
			private function zoomInTimerFinish(e:TimerEvent):void{
				crane.visible = true;
				crane.runTo(mCenterPosition);
				sailingMovie.visible = false;
				enableAllButtons();
			}
			//currently unused since there are no rat drop sounds or anims
			private function ratDropTimerFinish(e:TimerEvent):void{
				
			}
			
			//new visual items and visual only code --
			
			private var crane:MovieClip;
			private var sailingMovie:MovieClip;
			private var cHerder:MovieClip;
			private var skyAreaMask:Shape;
			private var sailMask:Shape;
			private var craneMask:Shape;
			private var transitionTimer:Timer;
			
			//ties the crane to MXML loader and sets up the mask
			private function initCrane():void{
				crane = CraneLoader.content as MovieClip;
				crane.visible = false;
				craneMask = new Shape();
				craneMask.graphics.beginFill(0x000000);
				craneMask.graphics.drawRect(0,0,395,286);
				uic.addChild(craneMask);//have to add masks to display list or else RemovePopUp will hide them and the object they are masking
				crane.mask = craneMask;
				//crane.runTo(mCenterPosition);
			}
			//loads the swf, sets colors, and starts the clouds
			private function initClouds():void{
				cHerder = CloudLoader.content as MovieClip;
				skyAreaMask = new Shape();
				skyAreaMask.graphics.beginFill(0x000000);
				skyAreaMask.graphics.drawRect(0,0,395,186);
				uic.addChild(skyAreaMask);//have to add masks to display list or else RemovePopUp will hide them and the object they are masking
				cHerder.mask = skyAreaMask;
				cHerder.init(5,395,0xDDDDDD);
				cHerder.startClouds();
			}
			//ties boat swf loader to code
			private function initBoat():void{
				//load boat
				sailingMovie = BoatLoader.content as MovieClip;
				//set zoom variables
				sailingMovie.zoomTime = 48;
				sailingMovie.finalX = -26;
				sailingMovie.finalY = -122;
				//set mask so zoom doesn't go outside box
				sailMask = new Shape();
				sailMask.graphics.beginFill(0x000000);
				sailMask.graphics.drawRect(0,0,395,286);
				uic.addChild(sailMask);//have to add masks to display list or else RemovePopUp will hide them and the object they are masking
				sailingMovie.mask = sailMask;
				//start sailing
				sailingMovie.ToyBoat.startSail();
			}
			
			//button control methods
			private function disableAllButtons(incExit:Boolean):void{
				mDropHookButton.enabled = false;
				mCenterPositionStepper.enabled = false;
				mSailOnButton.enabled = false;
				mRatStepper.enabled = false;
				mSendRatsButton.enabled = false;
				if(incExit)
					mExitHuntButton.enabled = false;
				else
					mExitHuntButton.enabled = true; //force it to be active so we can call disable a second time when everything is disabled to enable exit (used on gameComplete)
			}	
			private function enableAllButtons():void{
				mDropHookButton.enabled = true;
				mCenterPositionStepper.enabled = true;
				mExitHuntButton.enabled = true;
				mSailOnButton.enabled = true;
				mRatStepper.enabled = true;
				mSendRatsButton.enabled = true;
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="StartPage"/>
		<s:State name="TreasureHunt"/>
	</s:states>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:CurrencyFormatter id="usdFormatter"				precision="2" 
							  currencySymbol="$"			decimalSeparatorFrom="."
							  decimalSeparatorTo="."		useNegativeSign="true" 
							  useThousandsSeparator="true"	alignSymbol="left"/>
		<s:LinearGradient id="murkyWater" rotation="90">
			<s:GradientEntry color="0x796f5a" ratio=".33" alpha=".75"/>
			<s:GradientEntry color="0x000000" ratio=".66" alpha=".75"/>
		</s:LinearGradient>
		<s:LinearGradient id="clearWater" rotation="90">
			<s:GradientEntry color="0x076FA3" ratio=".33" alpha=".6"/>
			<s:GradientEntry color="0x000000" ratio=".66" alpha=".75"/>
		</s:LinearGradient>
		<s:LinearGradient id="daylight" rotation="90">
			<s:GradientEntry color="0x3BCFF3" ratio=".0" alpha=".75"/>
			<s:GradientEntry color="0xBFEFFB" ratio=".66" alpha=".75"/>
		</s:LinearGradient>
		<s:LinearGradient id="darkDay" rotation="90">
			<s:GradientEntry color="0x002358" ratio=".33" alpha=".75"/>
			<s:GradientEntry color="0x77787E" ratio=".66" alpha=".75"/>
		</s:LinearGradient>
		<s:SolidColorStroke id="separator" color="0x000000" weight="1"/>
	</fx:Declarations>
	<!--Opening screen -->
	<mx:Image	id="mStartPageBackground" x="0" y="0" source="{mPirateShipImage}" includeIn="StartPage"/>
	<s:RichText	id="mGameTitle" x="10" y="10" text="Ship Odyssey" fontFamily="Georgia" fontSize="40" color="#908F17" fontWeight="normal" fontStyle="italic" includeIn="StartPage"/>
	<s:Group	x="200" y="122" width="200" height="48" includeIn="StartPage">
		<s:Rect		id="mGroupRect" x="0" y="0" radiusX="4" radiusY="4" height="100%" width="100%">
			<s:stroke>
				<s:SolidColorStroke weight="1" scaleMode="normal" color="0xFFFFFF" alpha=".75"/>
			</s:stroke>
			<s:fill>
				<s:SolidColor color="0xB4B35F" alpha=".75"/>
			</s:fill>
		</s:Rect>        
		<s:Button	id="mTreasureHuntButton" x="10" y="10" label="Treasure Hunt" fontSize="24" fontStyle="italic" fontFamily="Georgia" height="28" click="switchToTreasureHunt(event)"/>
	</s:Group>
	
	<!-- Treasure hunt game and interactive areas -->
	<s:Label id="mTreasureHuntTitle" includeIn="TreasureHunt" x="5" y="4" width="163" color="#B4D5E6"
			 fontFamily="Times New Roman" fontSize="12" fontStyle="normal" text="Treasure Hunt(FL) v.12.01.26"/> <!--yy.mm.dd format-->
	<s:BorderContainer	id="mGameArea" includeIn="TreasureHunt" x="115" y="95" width="395" height="286" backgroundColor="0x555555" borderVisible="false">
		<s:BorderContainer id="Sky" width="395" height="186" depth="1" backgroundFill="{daylight}" >
			<s:SWFLoader id="CloudLoader" source="assets/cloudHerder.swf" depth="2" complete="initClouds()" includeIn="TreasureHunt"/>
		</s:BorderContainer>	
		<s:Rect id="Water" fill="{clearWater}" includeIn="TreasureHunt" x="0" y="186" width="395" height="100" depth="3" />
	</s:BorderContainer>
	<mx:UIComponent id="uic" x="115" y="95"/>
	<s:SWFLoader id="CraneLoader" x="115" y="95" width="395" height="286" source="assets/CraneAnimation.swf" depth="4" complete="initCrane()" includeIn="TreasureHunt"/>
	<s:SWFLoader id="BoatLoader" x="115" y="95" width="395" height="286" source="assets/BoatSailAnim.swf" depth="5" complete="initBoat()" includeIn="TreasureHunt"/>

	<!-- mostly Static Display items -->
	<s:BorderContainer	id="mHintContainer" includeIn="TreasureHunt" x="59" y="388" width="444" height="50" cornerRadius="10" dropShadowVisible="false" borderWeight="2" borderColor="#000000">
		<s:Label id="mHintLabel" x="8" y="7" text="{kWelcomeText}" width="424" height="32" color="#000000" fontFamily="Georgia" fontSize="14"/>
	</s:BorderContainer>
	<s:BorderContainer 	id="mResultsBox" x="515" y="95" width="81" height="274" backgroundColor="#A4AAB3" includeIn="TreasureHunt"/>
	<!--<mx:Image 		id="mResultsScroll" includeIn="TreasureHunt" x="511" y="95" source="{mScrollImage}" scaleContent="true" height="355" width="113"/>-->
	<s:Label	id="mTreasureLabel" includeIn="TreasureHunt" x="530" y="105" text="Treasure" color="#000000" fontWeight="normal" fontFamily="Georgia" fontSize="12" fontStyle="normal"/>
	<s:Label	id="mTimeLabel" includeIn="TreasureHunt" x="541" y="277" text="Time" color="#000000" fontWeight="normal" fontFamily="Georgia" fontSize="12" fontStyle="normal"/>
	<s:Label	id="mDaysRemainingLabel" includeIn="TreasureHunt" x="520" y="329" text="Days Remaining" height="30" width="70" textAlign="center" color="#000000" fontWeight="normal" fontFamily="Georgia" fontSize="12" fontStyle="normal"/>
	<mx:Image	id="mMoneyBag0" x="525" y="123" source="{mMoneyBagImage}" width="30" height="30" includeIn="TreasureHunt"/>
	<mx:Image	id="mMoneyBag1" x="557" y="123" source="{mMoneyBagImage}" width="30" height="30" includeIn="TreasureHunt"/>
	<mx:Image	id="mMoneyBag2" x="525" y="158" source="{mMoneyBagImage}" width="30" height="30" includeIn="TreasureHunt"/>
	<mx:Image	id="mMoneyBag3" x="557" y="158" source="{mMoneyBagImage}" width="30" height="30" includeIn="TreasureHunt"/>
	<mx:Image	id="mMoneyBag4" x="525" y="193" source="{mMoneyBagImage}" width="30" height="30" includeIn="TreasureHunt"/>
	<mx:Image	id="mMoneyBag5" x="557" y="193" source="{mMoneyBagImage}" width="30" height="30" includeIn="TreasureHunt"/>
	<s:Label 	id="mDaysRemainingValue" includeIn="TreasureHunt" x="516" y="296" text="{mDaysLeft}" fontSize="32" color="#A4804C" fontWeight="bold" fontStyle="normal" textAlign="center" width="78"/>
	
	<mx:Image	id="mAllTreasuresFoundAlert" includeIn="TreasureHunt" x="160" y="109" source="{mAllTreasuresFoundImage}" depth="6"/>
	<mx:Image	id="mTimeRanOutAlert" includeIn="TreasureHunt" x="160" y="109" source="{mTimeRanOutImage}" depth="6"/>
	<mx:Image	id="mCongratulationsAlert" includeIn="TreasureHunt" x="160" y="109" source="{mCongratulationsImage}" depth="6"/>
	<mx:Image	id="mNoTreasuresFoundAlert" includeIn="TreasureHunt" x="160" y="109" source="{mNoTreasuresFoundImage}" depth="6"/>
	<mx:Container id="TreasureFoundAlert">
		<s:Image id="TreasureFoundAlertImage" includeIn="TreasureHunt" x="160" y="109" source="{mParchmentImage}" depth="6"/>
		<s:Button id="ContinueOn" includeIn="TreasureHunt" x="240" y="240" label="Next Treasure" fontSize="14" fontStyle="italic" fontFamily="Georgia" height="18" click="sailNextTreasure(event)" width="75"/>
	</mx:Container>
	<!-- Game Treasure, profit, and days displays -->
	<s:BorderContainer includeIn="TreasureHunt" x="9" y="388" width="46" height="50" borderWeight="2" cornerRadius="8" borderColor="#000000">
		<mx:Image 	id="mPirateHead" includeIn="TreasureHunt" x="2" y="3" width="34" height="41" source="{mPirateHeadImage}"/>	
	</s:BorderContainer>
	<s:Label id="mProfitLabel" x="538" y="234" text="Profit" color="#000000" fontWeight="normal" fontFamily="Georgia" fontSize="12" fontStyle="normal" includeIn="TreasureHunt"/>
	<s:Label id="mProfitValue" x="516.5" y="254" text="$350,000" fontSize="15" color="#A4804C" fontWeight="bold" fontStyle="normal" includeIn="TreasureHunt" textAlign="center" height="14" width="78"/>
	<s:Label id="mInSearchOfLabel" includeIn="TreasureHunt" x="205" y="99" text="In search of treasure #" backgroundAlpha="0.0" fontFamily="Times New Roman" fontStyle="italic" fontSize="14" color="#7CB3D0"/>
	<s:Label id="mTreasuresFoundLabel" includeIn="TreasureHunt" x="218" y="193" text="Ye found 3 of the 6 treasures!" fontFamily="Georgia" fontStyle="italic" height="53" width="169" fontSize="22" textAlign="center" color="#000000" depth="7"/>
	<s:Label id="mSomeTreasuresFoundLabel" x="218" y="229" text="Tho' ye did find 3 of the 6 treasures!" fontFamily="Georgia" fontStyle="italic" height="47" width="169" fontSize="18" textAlign="center" color="#000000" includeIn="TreasureHunt" depth="7"/>
	
	<!-- Hook and Rat controls -->
	<s:BorderContainer	id="mControlContainer" includeIn="TreasureHunt" x="191" y="15" width="230" height="76" backgroundColor="#A4AAB3">
		<s:Label		id="mHookLabel" x="56" y="6" text="Grappling Hook" color="#000000" fontSize="16" fontFamily="Georgia" fontWeight="bold" fontStyle="normal"/>
		<s:Label		id="mPositionLabel" x="50" y="28" text="Center Position:" fontFamily="Georgia" fontWeight="bold"/>
		<s:Label		id="mRangeLabel" x="8" y="50" text="Range:" fontFamily="Georgia" fontWeight="bold"/>
		<s:Label 		id="mRangeValueLabel" x="57" y="50" width="80" color="#9B1D79" fontFamily="Georgia" fontWeight="bold"/>
		<s:Button 		id="mDropHookButton" x="142" y="49" label="Drop Hook" width="80" height="23" fontSize="12" click="onClickDropHookButton(event)"/>
		<s:NumericStepper id="mCenterPositionStepper" x="161" y="23" width="57" minimum="0" maximum="100" stepSize="1" snapInterval="0.1" change="onChangeCenterPosition(event)" contentBackgroundColor="#5081B4"/>
	</s:BorderContainer>
	<s:Button			id="mExitHuntButton" includeIn="TreasureHunt" x="520" y="414" label="Exit" fontSize="14" fontStyle="italic" fontFamily="Georgia" height="18" enabled="true" click="onClickExitTreasureHunt(event)" width="75"/>
	<s:Button			id="mSailOnButton" x="520" y="395" label="Sail On" fontSize="14" fontStyle="italic" fontFamily="Georgia" height="18" click="onClickSailOnButton(event)" width="75" includeIn="TreasureHunt"/>
	<s:BorderContainer id="RatControls" includeIn="TreasureHunt" x="1" y="96" height="180" backgroundColor="#A4AAB3">
		<s:Label id="mRatControlLabel" color="#000000" fontFamily="Georgia" fontSize="16" fontStyle="normal" fontWeight="bold" text="Rat Control" x="9" y="2" includeIn="TreasureHunt"/>
		<s:Line stroke="{separator}" xFrom="0" xTo="100" y="17" />
		<s:Label id="mRatRemainingLabel" width="99" height="21" fontFamily="Georgia" text="Rats Remaining:" x="8" y="22.5" includeIn="TreasureHunt"/>
		<s:Label id="mRatsLeftValueLabel" color="#9B1D79" fontFamily="Georgia" fontWeight="bold" text="{mRatsLeft}" includeIn="TreasureHunt" x="19" y="39"/>
		<s:Label id="mRatsLeftMax" includeIn="TreasureHunt" x="56" y="39" color="#9B1D79" fontFamily="Georgia" fontWeight="bold" text="/{kMaxRats}"/>
		<s:Label id="mNumRatsLabel" width="60" height="27" fontFamily="Georgia" fontWeight="bold" text="# of Rats to Send:" textAlign="right" x="-1" y="64" includeIn="TreasureHunt"/>
		<s:NumericStepper id="mRatStepper" width="50" height="23" change="onChangeRatStepper(event)" contentBackgroundColor="#5081B4" maximum="{kMaxRats}" minimum="{kMinRats}" stepSize="1" x="62" y="65" includeIn="TreasureHunt"/>
		<s:Button id="mSendRatsButton" height="23" label="Send Rats" click="onClickSendRatsButton(event)" x="17" y="94" includeIn="TreasureHunt"/>
		<s:Label id="mDiveResultsLabel" includeIn="TreasureHunt" x="5" y="123.5" width="99" height="19" fontFamily="Georgia" text="Dive Results:" textAlign="center"/>
		<s:BorderContainer x="0" y="140" width="111" height="25" includeIn="TreasureHunt">
			<s:Label 	id="mResultsFieldLabel" x="2" y="2" height="19" width="106" color="#9B1D79" lineBreak="explicit" verticalAlign="middle" fontWeight="bold" fontFamily="Georgia" textAlign="right"/>
		</s:BorderContainer>	
	</s:BorderContainer> 
</s:Application>
