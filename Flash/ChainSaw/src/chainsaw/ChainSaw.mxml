<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="745" minHeight="410" 
			   backgroundColor="#EAD1AA" 
			   creationComplete="testFlashPlayer()"
			   activate="ScriptInterface.signalActivation()" 
			   deactivate="ScriptInterface.signalDeactivation()"
			   pageTitle="Chainsaw">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import chainsaw.GameLevelWindow;
			
			import com.adobe.serialization.json.JSON;
			import com.kcpt.scriptInterface.ScriptInterface;
			
			import common.VersionChecker;
			
			import flash.media.Sound;
			import flash.media.SoundMixer;
			
			import mx.core.UIComponent;
			import mx.managers.CursorManager;
			import mx.managers.CursorManagerPriority;
			import mx.managers.PopUpManager;
			
			import spark.components.CheckBox;
			import spark.components.TitleWindow;
			import spark.core.SpriteVisualElement;
			import spark.events.TextOperationEvent;
			
			// BUILD FOR TinkerPlots or DG: 
			// edit true/false and rebuild to create a new build for each.
			// export the DG version to ./bin-release
			// export the TinkerPlots version to ./bin-release-tp
			
			private static const MINIMUM_REQUIREMENTS:Number = 11.4;	//the oldest version of flash player you can play this game on.
			
			private static const kUseDataGamesInterface:Boolean = true; // if TRUE use DG edition data interfaces, else use TinkerPlots 2.0-compatible data interface
			public static const VERSION:String   = "Chainsaw v.2013.06.17";
			public static const TP_suffix:String = " (fl-tp)" // edition: flash for TinkerPlots
			public static const DG_suffix:String = " (fl-dg)" // edition: flash for DG
			private function getVersion():String {
				return( VERSION + (kUseDataGamesInterface ? DG_suffix : TP_suffix ));
			}
			
			public var flashGasTank:MovieClip;
			public var sawdustParticles:ParticleLauncherXYFloor = new ParticleLauncherXYFloor();
			public var dynamicLog1:MovieClip;
			public var dynamicLog2:MovieClip;
			public var dynamicLog3:MovieClip;
			public var dynamicLog4:MovieClip;
			
			public static const kTimeLimit:Number		= 20;		// Number of seconds player has to cut logs.
			public static const kUpdatesPerSecond:Number= 4;		// Fuel tank updates per second.
			public static const kTotalUpdates:Number	= kTimeLimit * kUpdatesPerSecond; // Total number of updates.
			public static const kUpdateInterval:Number	= 1000 / kUpdatesPerSecond; // Milliseconds between updates.
			public static const kReferenceLength:Number	= 75;		// Reference length in pixels of 16" piece.
			public static const kPercentAllowance:Number= ((1.0/8.0)*100);		// Percent allowed above or below accepted cut length.
			public static const kConvertToInches:Number	= 16.0/kReferenceLength;// Used to convert pixel length to 16".
			public static const kFuelCapacity:Number	= 40;		// Units of fuel when full.
			
			// Levels
			public static const kPracticeLevel:uint		  = 0;		// Practice level.
			public static const kDirectionalCutLevel:uint = 1;		// Directional cut level.
			public static const kFreeCutLevel:uint		  = 2;		// Free cut level.
			public static const kHeavyFreeCutLevel:uint   = 3;		// Larger log size free cut level
			public static const kMixedFreeCutLevel:uint   = 4;		// Mixed log size free cut level
			
			// Collection names according to level played.
			public static const kCutsCollectionName:String	= "Cuts";
			public static const kGamesCollectionName:String	= "Games";
			public static const kLevelDirCut:String	= "Directional Cut";
			public static const kLevelNameThinLogs:String	= "Thin Logs";
			public static const kLevelNameThickLogs:String	= "Thick Logs";
			public static const kLevelNameMixedLogs:String	= "Mixed Logs";
			public static const kLevelLabelThinLogs:String	= "THIN LOGS LEVEL";
			public static const kLevelLabelThickLogs:String	= "THICK LOGS LEVEL";
			public static const kLevelLabelMixedLogs:String	= "MIXED LOGS LEVEL";
			
			// Strings indicating accptance/rejection status of cut pieces.
			public static const kAcceptString:String		= "Yes";
			public static const kRejectShortString:String	= "No-Short";
			public static const kRejectLongString:String	= "No-Long";
			public static const kRemnantString:String		= "Remnant";
			
			// Minimum accepted cut length in pixels.
			public static const kMinCutLength:Number	= kReferenceLength * (1.0 - (kPercentAllowance / 100));	
			// Maximum accepted cut length in pixels.
			public static const kMaxCutLength:Number	= kReferenceLength * (1.0 + (kPercentAllowance / 100));	
			
			// Create a timer to update the fuel level display and game duration.
			private var mFuelTimer:Timer = new Timer(kUpdateInterval, kTotalUpdates);
			
			// The down arrow.
			private var mArrowSprite:EnhancedSprite = new EnhancedSprite();
			private var mCutRightSprite:EnhancedSprite = new EnhancedSprite();
			private var mCutLeftSprite:EnhancedSprite = new EnhancedSprite();
			
			private var mFirstGame:Boolean			= true;	// Used for initial operations.
			private var mGameLevel:uint				= 3;	// Current game level. --init as 3 to force it to go through init loops in game select
			private var mPrevLevel:uint				= 3;	// Used to track level changes.
			private var mLevelWindow:GameLevelWindow;		// The modal window for choosing a game level.
			private var mLogsPerGame:uint			= 4;	// Number of logs being used in each game.
			private var mFuelUsed:Number			= 0;	// Stores how many units of fuel have been used.
			private var mChainsawCursorID:Number	= 0;	// Holds a cursor ID.
			private var mGameNumber:uint			= 0;	// Keeps track of games since app launch. Practice level ignored.
			private var mCurrentLog:uint			= 1;	// Current log being cut. 1 based.
			private var mLastLog:uint				= 0;	// Number of log at most recent cut. 1 based. 0 before cuts.
			private var mLastCutX:Number			= 0;	// X location of most recent cut.
			private var mLeftToRight:Boolean		= true;	// Current cutting direction of log.
			private var mPiecesAccepted:uint		= 0;	// Number of cut pieces accepted.
			private var mPiecesRejected:uint		= 0;	// Number of cut pieces rejected.
			private var mPiecesShort:uint			= 0;	// Number of cut pieces rejected as short.
			private var mPiecesLong:uint			= 0;	// Number of cut pieces rejected as long.
			private var mPiecesRemnant:uint			= 0;	// Number of cut pieces rejected as remnants.
			private var mPlayersName:String			= "Player"; // Stores player's name.
			
			private var currentCutStartPoint:Number; // Holds the starting position for each cut.
			private	var	parentCaseID:int = 0;
			private var parentCaseScore:String = ''; // Holds the last value of the Score attribute, if created by the user in the parent case (DG interface only)
			private var practice:Boolean = false; // whether the game is in practice mode or not
			
			// These arrays store the details of individual logs for access by all who need to know.
			private var mLogDetails1:Array;
			private var mLogDetails2:Array;
			private var mLogDetails3:Array;
			private var mLogDetails4:Array;
			
			// Stores array of logs/logtops used in game.
			private var mLogArray:Array;
			
			// Holds piece number beginning at 1 for each cut piece since start of application.
			// Transmitted to TinkerPlots/Fathom. Practice level ignored.
			private var mPieceNumber:uint			= 0;	
			
			// Holds value of piece count as of previous game. Used in free cut levels to calculate
			// piece numbers in cut order rather than location on log.
			private var mPrevPieceNumber:uint		= 0;
			
			// Holds cut number beginning at 1 for cuts made in free cut levels.
			private var mCutNumber:uint				= 0;
			
			// An array that keeps track of the cuts
			private var mCutsArray:Array = new Array();
			
			// Embed the cursor symbol.
			// From http://www.rw-designer.com/cursor-download.php?id=2222 on 12/11/2010
			// Converted from .ani format to .png.
			[Embed(source="../embedded_assets/Chainsaw Cursor 2.png")]
			private var mChainsawCursor:Class;
			
			// Embed the reference length image file.
			[Embed(source="../embedded_assets/Reference Length 75 Pixels.png")]
			[Bindable]
			private var mLengthImage:Class;
			
			// Embed tape measure image
			[Embed(source="../embedded_assets/tape_measure.png")]
			[Bindable]
			private var mTapeMeasureImage:Class;
			
			// Embed the down arrow image file.
			[Embed(source="../embedded_assets/Down Arrow Small.png")]
			[Bindable]
			private var mDownArrowImage:Class;
			
			[Embed(source="../embedded_assets/Cut From Here Right.png")]
			[Bindable]
			private var mCutRightArrow:Class;
			
			[Embed(source="../embedded_assets/Cut From Here Left.png")]
			[Bindable]
			private var mCutLeftArrow:Class;

			
			// Embed volume icon
			[Embed(source="../embedded_assets/Volume.png")]
			[Bindable]
			private var mVolumeIcon:Class;
			
			[Embed(source="../embedded_assets/Volume_half.png")]
			[Bindable]
			private var mHalfVolumeIcon:Class;
			
			[Embed(source="../embedded_assets/Volume_off.png")]
			[Bindable]
			private var mLowVolumeIcon:Class;
			
			[Embed("../src/embedded_assets/longBogDown.mp3")]
			private var ChainsawSoundMP3:Class;
			private var mChainsawSound:Sound = new ChainsawSoundMP3() as Sound;
			
			[Embed("../src/embedded_assets/engineStop.mp3")]
			private var EngineStopSoundMP3:Class;
			private var mEngineStopsSound:Sound = new EngineStopSoundMP3() as Sound;
			
			[Embed("../src/embedded_assets/startUp.mp3")]
			private var EngineStartSoundMP3:Class;
			private var mEngineStartSound:Sound = new EngineStartSoundMP3() as Sound;
			
			private var mEngineStartSoundChannel:SoundChannel;
			
			// test flash player makes sure the player is meeting the minimum requirements.
			private function testFlashPlayer():void
			{
				if( VersionChecker.isValid( MINIMUM_REQUIREMENTS))
				{
					recheckTimer.addEventListener(TimerEvent.TIMER, checkSWFLoaders);
					checkSWFLoaders();
				} else {
					BrickWall.visible = true;
				}
			}
			// startUp() is called when the creation of this class is complete
			// and sets up necessary parameters for game initiation.
			private	function startUp():void
			{

				BrickWall.visible = false;
				
				if(allAssetsLoaded) {
					LoadWall.visible = false;
					recheckTimer.removeEventListener(TimerEvent.TIMER, checkSWFLoaders);
					
					// Arrays store individual cuts on each log for use in free cut levels.		
					mLogDetails1 = new Array(dynamicLog1, null, new Array());
					mLogDetails2 = new Array(dynamicLog2, null, new Array());
					mLogDetails3 = new Array(dynamicLog3, null, new Array());
					mLogDetails4 = new Array(dynamicLog4, null, new Array());
					// Stores array of logs/logtops used in game.
					// Create new log array and add log/logtop to array.
					mLogArray = new Array(mLogDetails1, mLogDetails2, mLogDetails3, mLogDetails4);
					
					// Load and draw the cut location arrow.
					mArrowSprite.loadImage(mDownArrowImage);
					mArrowSprite.visible = false;
					mLogYardContainer.addElement(mArrowSprite);
					
					mCutRightSprite.loadImage(mCutRightArrow);
					mCutRightSprite.visible = false;
					mLogYardContainer.addElement(mCutRightSprite);
					
					mCutLeftSprite.loadImage(mCutLeftArrow);
					mCutLeftSprite.visible = false;
					mLogYardContainer.addElement(mCutLeftSprite);
					
					// Randomize log array.
					randomizeLogSizePosition();
					
					// add particle emitter to display
					uic.addChild(sawdustParticles);
					uic.mouseEnabled = false; //not quashing the mouse events from UIC was causing mouse events when its children particles were thrown in front of the mouse
					uic.mouseChildren = false;
					sawdustParticles.xOffset = 10;
					sawdustParticles.yOffset = 10;
					sawdustParticles.pColor = 0xD4B077;
					sawdustParticles.yFloor = 410-10; // top edge of where sawdust lands is 10 from bottom of game
					
					mLevelWindow = new GameLevelWindow();
					this.sendCollectionData();		// send initGame data to TinkerPlots/DG
					
					levelSelected(kFreeCutLevel); //Start in free cut mode
					
					updateVolume(50); // start with volume at 50% level
				} else {
					recheckTimer.start();
				}
			} 

			// Send the initial game data to TinkerPlots or DG.  The collections are the tables of cases and attributes.
			private	function	sendCollectionData( ):void	{
				var	result:String;
				
				if( kUseDataGamesInterface ) 
				{	// use the DG-compatible data interface for extra functionality; not compatible with TinkerPlots 2.0 Research Edition
					var initGameObj:Object = {
						action: "initGame",
						args: {
							name: "Chainsaw",
							dimensions: { width: 745, height: 410 }, // should match 'Application' width and height
							collections: [
								{
									name: kGamesCollectionName,
									attrs:[
										{ name: "Player" , type: "nominal" ,  description: "Name of the player"   } ,
										{ name: "GameNumber" , type: "nominal" , precision: 0, description: "Game number"   } , 
										{ name: "Score", type: "numeric", precision: 1, description: "Score for this game", editable: true },
										{ name: "Rank", type: "numeric", precision: 0, description: "Rank of this game", editable: true },
										{ name: "Level" , type: "nominal" ,  description: "Game level"   } ,	
										{ name: "Strategy" , type: "nominal" ,  description: "Cut strategy used by the player"   } ,	
										{ name: "Accepted" , type: "numeric" , precision: 0, description: "Number of pieces accepted"   } , 
										{ name: "Remnant" , type: "numeric" , precision: 0, description: "Number of remnant pieces"   } , 
										//{ name: "Pieces_Rejected" , type: "numeric" , precision: 0, description: "Number of pieces rejected"   } , 
										{ name: "Short" , type: "numeric" , precision: 0, description: "Number of pieces rejected as short"   } , 
										{ name: "Long" , type: "numeric" , precision: 0, description: "Number of pieces rejected as long"   } , 
										{ name: "FuelLeft" , type: "numeric" , precision: 0, description: "Amount of fuel left"   } , 
										{ name: "FuelLeftPercent" , type: "numeric" , precision: 1, description: "Percent of fuel left"   }			
									] ,
									childAttrName: "Cut_Record"
								},
								{
									name: kCutsCollectionName,
									attrs:	[
										{ name: "GameNumber" , type: "nominal" , precision: 0, description: "Game number"   } ,
										{ name: "Length" , type: "numeric" , precision: 2, description: "Length of cut"   } , 
										{ name: "Thickness" , type: "nominal" , description: "Thickness of log"  } , 
										{ name: "IsAccepted" , type: "nominal" , description: "Is piece an acceptable length?",
											colormap: { 
												"Yes": 'green', 	// kAcceptString
												"No-Short": 'red',	// kRejectShortString
												"No-Long": 'red',	// kRejectLongString
												"Remnant": 'yellow'	// kRemnantString
											}},
										{ name: "Log" , type: "numeric" , precision: 0, description: "Log number",
											colormap: { 'attribute-color': '#6f4900'  // brown
											}}
									],
									labels: {
										singleCase: "piece",
										pluralCase: "pieces",
										singleCaseWithArticle: "a piece",
										setOfCases: "cut record",
										setOfCasesWithArticle: "a cut record"
									},
									defaults: { xAttr: "Length", yAttr: "GameNumber" }
								}
							] // collections
						} // args
					}; //initGameObj
					var	initGameString:String = JSON.encode( initGameObj );
					result = ScriptInterface.doCommand( initGameString );
				}
				else {
					// use the old data interface compatible with TinkerPlots 2.0 Research Edition; 
					// works less well with DG, does not give game dimensions, does not identify numeric/categorical type of attributes, etc.
					// event collection and attributes
					ScriptInterface.NewCollectionWithAttributes(
						"Cuts",
						[  // Note: "Player" used at cuts level in TP only (not DG)
							"Player",			// Name of the player.
							"Game",				// Game number starting with 1 since launch of application.
							"Length",			// Length of cut piece.
							"Thickness",		// Thin or thick depending on game type
							"IsAccepted",			// True if cut piece is within accepted range of cut length.
							"Log"				// Number of log from which piece was cut.
						]
					);
					
					// game collection and attributes
					ScriptInterface.NewCollectionWithAttributes(
						kGamesCollectionName,
						[
							"Player",			// Name of the player.
							"Game",				// Game number starting with 1 since launch of application.
							"Level",			// The current level type
							"Strategy",			// The Cut Strategy Used by the player
							"Accepted",			// Number of pieces accepted.
							"Remnant",			// Number of remnant pieces
							//"Pieces_Rejected",	// Number of pieces rejected.
							"Short",			// Number of pieces rejected as short.
							"Long",				// Number of pieces rejected as long.
							"FuelLeft",			// Raw amount of fuel left.
							"FuelLeftPercent"	// Percent of fuel left.
						]
					);
				}
			}

			
			// clearGame() resets the game according to the current level and clears remnants of
			// the previous game, if any.
			private function clearGame(iNewGameLevel:uint):void
			{
				// hide results overlay if visible from end of previous game
				mResultsOverlay.visible		= false; 
				
				// Move direction arrow sprites to first log				
				resetArrowSprites();
				
				// remove all Status Labels from the holder and hide the holder
				mStatusLabelHolder.visible = false;
				mStatusLabelHolder.removeAllElements();
				
				// Enable/show log cutting edge. Clear all cuts in array.
				for (var i:Number = 0; i < mLogsPerGame; ++i)
				{
					if (iNewGameLevel >= kFreeCutLevel)
					{
						// Clear cut lists on log.
						while (mLogArray[i][2].length > 0)
							mLogArray[i][2].pop();
					}	
				}
				
				flashGasTank['resetDrop'](); // Set fuel height back to top of fuel container.
				mFuelUsed = 0;		// Initialize the fuel used to zero.
			}
			
			// chooseGameLevel() listens for clicks on the level dialog's level buttons.
			private function chooseGameLevel():void 
			{
				var isModal:Boolean = true;
				PopUpManager.addPopUp(mLevelWindow, this, isModal); 
				
				PopUpManager.centerPopUp(mLevelWindow);		// Center the window.
				mLevelWindow.closeButton.visible = false;	// Hide the close button.
				
				mLevelWindow["mFreeCutButton"].addEventListener("click", freeCutLevel);
				mLevelWindow["mHeavyFreeCutButton"].addEventListener("click", heavyFreeCutLevel);
				mLevelWindow["mMixedFreeCutButton"].addEventListener("click", mixedFreeCutLevel);
				
				mLevelWindow["PracticeCheckBox"].addEventListener("change", togglePractice);
				this.practice = (mLevelWindow["PracticeCheckBox"] as CheckBox).selected;
			}
			
			private function togglePractice(e:Event):void
			{
				var selected:Boolean = (e.currentTarget as CheckBox).selected;
				this.practice = selected;
			}
			
			// freeCutLevel() sets the current game level to free cut.
			private function freeCutLevel(iEvent:Event):void 
			{
				levelSelected(kFreeCutLevel);
			}
			private function heavyFreeCutLevel(iEvent:Event):void
			{
				levelSelected(kHeavyFreeCutLevel);
			}
			private function mixedFreeCutLevel(iEvent:Event):void
			{
				levelSelected(kMixedFreeCutLevel);
			}
			
			//level select redirected from button calls with level number - sets up the play field for each level
			private function levelSelected(levelNum:int):void
			{
				mPrevLevel = mGameLevel; // Track game level change.
				mGameLevel = levelNum; // Set game level
				PopUpManager.removePopUp(mLevelWindow); // Close the modal window
				
				// Only reset if user selects different level (Otherwise it will be reset when they click start)
				if(mPrevLevel != mGameLevel) 
				{
					if(mPrevLevel >= kHeavyFreeCutLevel){
						dynamicLog1.resizeLogFront(35,12);
						dynamicLog1.setLogWidthLabel("thin");
						dynamicLog2.resizeLogFront(35,12);
						dynamicLog2.setLogWidthLabel("thin");
						dynamicLog3.resizeLogFront(35,12);
						dynamicLog3.setLogWidthLabel("thin");
						dynamicLog4.resizeLogFront(35,12);
						dynamicLog4.setLogWidthLabel("thin");
					}
					randomizeLogSizePosition(); // Randomize logs
					
					if (levelNum >= kFreeCutLevel) // If Free Cut level was selected
					{
						if(levelNum == kHeavyFreeCutLevel){
							dynamicLog1.resizeLogFront(50,15);
							dynamicLog1.setLogWidthLabel("thick");
							dynamicLog2.resizeLogFront(50,15);
							dynamicLog2.setLogWidthLabel("thick");
							dynamicLog3.resizeLogFront(50,15);
							dynamicLog3.setLogWidthLabel("thick");
							dynamicLog4.resizeLogFront(50,15);
							dynamicLog4.setLogWidthLabel("thick");
							mLevelLabel.text = kLevelLabelThickLogs;
						}else if(levelNum == kMixedFreeCutLevel){
							dynamicLog1.resizeLogFront(50,15);
							dynamicLog1.setLogWidthLabel("thick");
							dynamicLog2.resizeLogFront(35,15);
							dynamicLog2.setLogWidthLabel("thin");
							dynamicLog3.resizeLogFront(50,15);
							dynamicLog3.setLogWidthLabel("thick");
							dynamicLog4.resizeLogFront(35,15);
							dynamicLog4.setLogWidthLabel("thin");
							mLevelLabel.text = kLevelLabelMixedLogs;
						}else{
							mLevelLabel.text = kLevelLabelThinLogs;
						}
						clearGame(kFreeCutLevel); 
						dynamicLog1['init'](0,dynamicLog2); // send cut direction and link to next log
						dynamicLog2['init'](0,dynamicLog3); // cut direction 1=LtoR, -1=RtoL, 0 = free
						dynamicLog3['init'](0,dynamicLog4);
						dynamicLog4['init'](0,null);
						
						mArrowSprite.visible		= false; // Hide cut location arrow.
						mCutRightSprite.visible		= false; 
						mCutLeftSprite.visible		= false; 
						
					}else // If Practice or Directional Cut level was selected
					{
						clearGame(0);
						dynamicLog1['init'](1,dynamicLog2); //send cut direction and link to next log
						dynamicLog2['init'](-1,dynamicLog3); // cut direction 1=LtoR, -1=RtoL, 0 = free
						dynamicLog3['init'](1,dynamicLog4);
						dynamicLog4['init'](-1,null);

						mArrowSprite.visible		= false; // Show cut location arrow.
						mCutRightSprite.visible		= true;
						mCutLeftSprite.visible		= false;
						
						if (levelNum == kDirectionalCutLevel)	mLevelLabel.text = "DIRECTIONAL CUT LEVEL";
						if (levelNum == kPracticeLevel)			mLevelLabel.text = "PRACTICE LEVEL";
					}
				}
				
				mLevelLabel.text = mLevelLabel.text.replace(" (practice)", "");
				if(practice) mLevelLabel.text += " (practice)";
			}
			
			// randomizeLogSizePosition() randomly resorts the logs in the log array.
			protected function randomizeLogSizePosition():void
			{
				dynamicLog1.x = Math.random()*120+40;
				dynamicLog1.y = 38;
				dynamicLog1['drawNewLog'](pickLogLength());
				
				dynamicLog2.x = Math.random()*120+40;
				dynamicLog2.y = 120;//127
				dynamicLog2['drawNewLog'](pickLogLength());
				
				dynamicLog3.x = Math.random()*120+40;
				dynamicLog3.y = 202;//216
				dynamicLog3['drawNewLog'](pickLogLength());
				
				dynamicLog4.x = Math.random()*120+40;
				dynamicLog4.y = 284;//305
				dynamicLog4['drawNewLog'](pickLogLength());
				
				// Move direction arrow sprites to first log
				resetArrowSprites();

				mArrowSprite.x = mLogArray[0][0].x - mArrowSprite.getWidth() + 5;	// Start with arrow pointing at left edge of first log.
				mArrowSprite.y = mLogArray[0][0].y - (mArrowSprite.getHeight()+2);	// Start at top edge of first log.
			}
			
			private function resetArrowSprites():void
			{
				// Move direction arrow sprites to first log				
				mCutRightSprite.x = mLogArray[0][0].x - 58;
				mCutRightSprite.y = mLogArray[0][0].y - 30;
				mCutLeftSprite.x = mLogArray[0][0].x + mLogArray[0][0].width;
				mCutLeftSprite.y = mLogArray[0][0].y - 30;
			}
			
			/**
			 * Helper function for randomizeLogSizePosition() that returns a length as an int that
			 * is long enough for 4 or 5 logs with a little extra padding (1/2 to 6/7 of a log length).
			 * 
			 * @return length
			 * @author Ryan
			 */
			private function pickLogLength():int
			{
				var length:int;
				length = kReferenceLength*4;									// The base length (4 pieces long)
				length+= Math.round(Math.random())*kReferenceLength;			// Randomly add or don't add a 5th piece to the length 
				length+= Math.ceil(Math.random()*(kReferenceLength*0.36)+0.5);	// Finally add 1/2 to 6/7 of a piece to the log as padding
				return length;	// Return the length
			}

			
			// recordPieceStatus() evaluates the piece's acceptance status and records the outcome
			// by setting a visual marker on each log.
			protected function recordPieceStatus(pieceStatus:PieceStatus, pieceNumberBase:uint=0):void
			{
				var currentLog:MovieClip = mLogArray[pieceStatus.mLogNumber-1][0] as MovieClip; // The current log
				
				// Not cutting, so don't specify a cut location.
				if (pieceStatus.mIsEndPiece) pieceStatus.mCutX = 0;
				
				// Create "X" or "√" for piece to indicate rejected or accepted. "O" for remnants.
				var statusLabel:Label = createStatusLabel();
								
				// Accept cut piece if it falls within accepted range.
				var accepted:Boolean = pieceStatus.isAccepted();
				var remnant:Boolean = pieceStatus.isRemnant();
				var acceptString:String = pieceStatus.getAcceptString();
				
				// Keep track of how many cut pieces are accepted / rejected and set status label text.
				if (accepted){
					if (!practice) ++mPieceNumber;
					++mPiecesAccepted;
					statusLabel.text	= "√";					// Check mark = OK.
					statusLabel.setStyle("color", "0x00FF00");	// Green = OK.
				}else if (remnant){
					if (!practice) ++mPieceNumber;
					statusLabel.text = "O";
					statusLabel.setStyle("color", "0xFFFF00"); // Yellow
					++mPiecesRemnant;
				}else{
					if (!practice) ++mPieceNumber;
					++mPiecesRejected;
					statusLabel.text = "X";						// X = not OK.
					statusLabel.setStyle("color", "0xFF0000");	// Red = not OK.
					if(pieceStatus.mLength < kMinCutLength){
						++mPiecesShort;
					}else{
						++mPiecesLong;
					}
				}
				
				// Set y location of status label for cut piece.
				statusLabel.y = (currentLog.height / 2) - (statusLabel.height / 2) + currentLog.y;
				// Set x location of status label for cut piece.
				if (pieceStatus.mLeftToRight>0){
					// End piece or cutting along same log as at the last cut.
					if (pieceStatus.mIsEndPiece || (!pieceStatus.mIsEndPiece && !pieceStatus.mIsNewLog))
						statusLabel.x = pieceStatus.mPrevXCut + (pieceStatus.mLength / 2) - (statusLabel.width / 2)+currentLog.x;
						// Cutting on new log.
					else statusLabel.x = (pieceStatus.mLength / 2) - (statusLabel.width / 2)+currentLog.x;
				}
				else statusLabel.x = pieceStatus.mCutX + (pieceStatus.mLength / 2) - (statusLabel.width / 2)+currentLog.x;
				
				//add statusLabel element to holder to be shown later
				mStatusLabelHolder.addElement(statusLabel);
			}
			/*
			Send a single piece data to DG/TinkerPlots/Fathom.
			*/
			protected function transmitPieceStatus(pieceStatus:PieceStatus, pieceNumberBase:uint=0):void
			{
				var currentLog:MovieClip = mLogArray[pieceStatus.mLogNumber-1][0] as MovieClip; // The current log
				if (!practice)
				{
					var lengthTwoDecimals:String	= (pieceStatus.mLength * kConvertToInches).toFixed(2);
					var pieceNumber:uint 			= pieceStatus.mCutNumber+pieceNumberBase == 0 ? mPieceNumber : pieceStatus.mCutNumber+pieceNumberBase;
					var thickness:String = currentLog.getLogWidthLabel();
					var acceptString:String = pieceStatus.getAcceptString();
					
					// Send info on cut pieces to TinkerPlots/Fathom.
					if( kUseDataGamesInterface ) 
					{
						// send data for case in Cut collection to DG
						var createCaseObj:Object = {
							action: "createCase",
							args: {
								collection: kCutsCollectionName,
								parent: this.parentCaseID,
									values: [
										mGameNumber,
										lengthTwoDecimals,
										thickness,
										acceptString,
										pieceStatus.mLogNumber
									]
							}
						};
						ScriptInterface.doCommand( JSON.encode( createCaseObj ));
					}
					else {
						// send data for case in Cut collection to TinkerPlots/Fathom
						ScriptInterface.AddCaseToCollectionWithValues(		
							kCutsCollectionName,
							[
								mPlayersName,		// Name of the player (Note: "Player" used at cuts level in TP only (not DG))
								mGameNumber,		// Game number starting with 1 since launch of application.  Ignore practice levels.
								lengthTwoDecimals,	// Piece length.
								thickness,			// log label "thin" or "thick"
								acceptString,		// Status of cut piece.
								pieceStatus.mLogNumber			// Number of log from which piece was cut.
							]
						);
					}
				}
			}
			
			/**
			 * Creates a label to mark the piece on the log at the end of the game.
			 */
			private function createStatusLabel():Label
			{
				var statusLabel:Label	= new Label();
				statusLabel.width		= 14;			// Setting manually, as measureText() fails with Spark Label.
				statusLabel.height		= 14;
				statusLabel.setStyle("fontWeight", "bold");
				statusLabel.setStyle("fontSize", "16");
				statusLabel.setStyle("antiAliasType", "normal");
				statusLabel.setStyle("justificationStyle", "auto");
				
				return statusLabel;
			}
			
			// startGame() is called whenever the start button is pressed.
			protected function startGame():void
			{
				mLastLog			= 0;	// Reset last cut log counter.
				mCurrentLog			= 1;	// Reset log counter.
				mLastCutX			= 0;	// Reset X position of most recent cut.
				mPiecesAccepted		= 0;	// Reset number of cut pieces accepted.
				mPiecesRejected		= 0;	// Reset number of cut pieces rejected.
				mPiecesRemnant		= 0;	// Reset number of remnants
				mPiecesShort		= 0;	// Reset number of rejected short pieces
				mPiecesLong			= 0;	// Reset number of rejected long pieces
				mLeftToRight		= true;	// Begin cutting left to right.
				mCutNumber			= 0;	// Reset cut number.
				
				mEngineStartSoundChannel = mEngineStartSound.play(0);
				mEngineStartSoundChannel.addEventListener(Event.SOUND_COMPLETE, bogDownPlayerHandler);

				// Randomize log array, but not for first game, as it's already random.
				if (!mFirstGame)
				{
					// Don't randomize if this was just done on level change.
					if (mPrevLevel == mGameLevel)
						randomizeLogSizePosition();
				}
				else mFirstGame = false;
				
				clearGame(mGameLevel); // Clear any remnants of last game and reset game.
				
				mChangeLevelButton.enabled	= false;
				mPlayerTextInput.enabled	= false;
				mChainsawCursorID			= CursorManager.setCursor(mChainsawCursor, CursorManagerPriority.HIGH);
				
				if (mGameLevel < kFreeCutLevel)
				{
					mCutRightSprite.visible = true; //display direction arrow
					mCutLeftSprite.visible = false;
				}
				
				// Use timer to update the fuel level display and game duration.
				if (!practice)
				{
					// Set game number since app launch when new game starts, not counting practice level).
					++mGameNumber;
					// Set up the fuel timer and visual gas tank
					mFuelTimer.addEventListener(TimerEvent.TIMER, timerListener);
					mFuelTimer.reset();	// Reset the timer to run until fuel runs out.
					mFuelTimer.start(); // Start the timer, now that all variables are set up.
					flashGasTank['initGasTank'](kTimeLimit * 24);
					flashGasTank['startDrop']();
				}
				dynamicLog1.enabled = true;
				if (mGameLevel >= kFreeCutLevel){
					dynamicLog2.enabled = true;
					dynamicLog3.enabled = true;
					dynamicLog4.enabled = true;
					mArrowSprite.visible = false;
				}
				
				if (!practice)
				{
					var levelName:String;					
					switch(mGameLevel)
					{
						case kDirectionalCutLevel:
							levelName = kLevelDirCut;
							break;
						case kFreeCutLevel:
							levelName = kLevelNameThinLogs;
							break;
						case kHeavyFreeCutLevel:
							levelName = kLevelNameThickLogs;
							break;
						case kMixedFreeCutLevel:
							levelName = kLevelNameMixedLogs;
							break;
					}
					
					if( kUseDataGamesInterface )  {
						// send data to open a case in Game collection to DG
						var openGameCaseObj:Object = {
								action: "openCase",
								args: { 
									collection: kGamesCollectionName,
									values: [
										mPlayersName,
										mGameNumber,
										'', // Score
										'', // Rank
										levelName
									]
								} 	
							}
						var	resultString:String = ScriptInterface.doCommand( JSON.encode( openGameCaseObj ));
						var resultObj:Object = (resultString ? JSON.decode( resultString ) : null );
						this.parentCaseID = (resultObj && resultObj.success ? resultObj.caseID : -1 );
					}
					else {
						// send data to open a case in Game collection to TinkerPlots/Fathom
						// (Nothing to do)
					}
				}
			}
			
			private function bogDownPlayerHandler(e:Event):void{
				mChainsawSound.play(0, int.MAX_VALUE);
			}
			
			// endGame() performs all operations necessary when game is complete.
			protected function endGame():void
			{
				var strategy:String = "";
				doEndGameStop();
				if (mGameLevel >= kFreeCutLevel){
					checkFreeCuts();
					strategy = determineCutStyle();
				}
					// Directional cut mode. Measure end piece if player has already started cutting current log and we run out of fuel
				else if (mCurrentLog == mLastLog && mFuelUsed == kFuelCapacity)
				{
					// Calculate distance from end of log in the direction player was cutting.
					// mCurrentLog begins at 1. Array index begins at 0.
					var woodRemaining:Number	= mLeftToRight? mLogArray[mCurrentLog-1][0].width - mLastCutX -10 : mLastCutX;
					var isEndPiece:Boolean		= true;
					
					// Evaluate the piece's acceptance status and record the outcome by setting a 
					// visual marker on each log and also transmit the info to Fathom/TinkerPlots.
					recordPieceStatus(new PieceStatus(
						woodRemaining, 			// Piece length
						mCurrentLog, 			// Number of log ( 1 is at top).
						isEndPiece, 			// True if end piece.
						mLeftToRight, 			// True if cutting left to right.
						mCurrentLog != mLastLog,// True if measuring on new log for first time.
						mFuelUsed,				// Raw fuel used at the time of piece creation.
						mLastCutX,				// Last cut location
						0,						// Cut location
						0,						// Cut number
						mLogArray)
					);
				}
				
				var fuelLeftFraction:Number	= 1 - (mFuelUsed / kTotalUpdates);
				var fuelLeftAmount:Number	= fuelLeftFraction * kFuelCapacity;
				var fuelLeftPercent:Number	= fuelLeftFraction * 100;
				
				//send game information to TinkerPlots/Fathom
				if (!practice)
				{
					var levelName:String;					
					switch(mGameLevel)
					{
						case kDirectionalCutLevel:
							levelName = kLevelDirCut;
							break;
						case kFreeCutLevel:
							levelName = kLevelNameThinLogs;
							break;
						case kHeavyFreeCutLevel:
							levelName = kLevelNameThickLogs;
							break;
						case kMixedFreeCutLevel:
							levelName = kLevelNameMixedLogs;
							break;
					}
					
					// Send info on games to TinkerPlots/Fathom.
					if( kUseDataGamesInterface )  {
						// send data to close a case in Game collection to DG
						var	closeGameCaseObj:Object = { 
								action: "closeCase",
								args: { 
									collection: kGamesCollectionName,
									caseID: this.parentCaseID,
									values: [
										mPlayersName,
										mGameNumber,
										'', //score
										'', //rank
										levelName,
										strategy,
										mPiecesAccepted,
										mPiecesRemnant,
										//mPiecesRejected,
										mPiecesShort,
										mPiecesLong,
										fuelLeftAmount,
										fuelLeftPercent
									]
								}
							};
						ScriptInterface.doCommand( JSON.encode( closeGameCaseObj ));
						// extract value of formula attribute 'score', if created by user in DG
						var	requestAttributeValueObj:Object = {
								action: "requestAttributeValues",
								args: { 
									collection: kGamesCollectionName,
									caseID: this.parentCaseID,
									attributeNames: ["Score"]
								}
							};
						var	resultString:String = ScriptInterface.doCommand( JSON.encode( requestAttributeValueObj ));
						var resultObj:Object = (resultString ? JSON.decode( resultString ) : null );
						this.parentCaseScore = "?";
						if( resultObj && resultObj.success && resultObj.values ) {
							if( resultObj.values.length >= 1 && resultObj.values[0] != null ) {
								this.parentCaseScore = resultObj.values[0].toString(); // if numeric or string value for 'Score', use it
							}
						}
					}
					else {
						// send data to close a case in Game collection to TinkerPlots/Fathom
						ScriptInterface.AddCaseToCollectionWithValues(
							kGamesCollectionName,
							[
								mPlayersName,		// Name of the player.
								mGameNumber,		// Game number starting with 1 since launch of application.
								levelName,			// Game Type
								strategy,			// the determined cut strategy
								mPiecesAccepted,	// Number of pieces accepted.
								mPiecesRemnant,		// Number of pieces remnant.
								//mPiecesRejected,	// Number of pieces rejected.
								mPiecesShort,		// Number of pieces rejected as short.
								mPiecesLong,		// Number of pieces rejected as long.
								fuelLeftAmount,		// Raw amount of fuel left.
								fuelLeftPercent		// Percent of fuel left.
							]
						);
					}
				}
				
				mScoreValue.text			= "Score: " + this.parentCaseScore;
				mAcceptedPiecesValue.text	= "Number of Accepted Pieces:  " + mPiecesAccepted.toString();		// Update the number of accepted pieces.
				
				mFuelLeftValue.text	= fuelLeftAmount.toString() +" ("+ fuelLeftPercent.toFixed();		// Update the percentage of fuel left.
				mFuelLeftValue.text = mFuelLeftValue.text.replace(/\.\d*/,"") + "%)"; // remove the decimal point and trailing digits, then append '%'
				mFuelLeftValue.text = "Fuel Left:  " + mFuelLeftValue.text;

				mResultsOverlay.visible		= true;								// Display the results Overlay
				
				mPrevLevel 			= mGameLevel;	// Track game level change.
				mPrevPieceNumber	= mPieceNumber;	// Track piece number at the end of the game.
			}
			
			// sub-function of endGame(), stops all game functions and enables regular UI items
			private function doEndGameStop():void{
				dynamicLog1.enabled = false;//disable all logs from being cut
				dynamicLog2.enabled = false;
				dynamicLog3.enabled = false;
				dynamicLog4.enabled = false;
				
				mStatusLabelHolder.visible=true;//show all status labels
				
				mArrowSprite.visible = false; //hide cut place arrow if it is shown
				mCutRightSprite.visible = false;
				mCutLeftSprite.visible = false;
				
				if (!practice)
				{
					mFuelTimer.stop();													// Stop fuel timer.
					mFuelTimer.removeEventListener(TimerEvent.TIMER, timerListener);	// Stop listening.
					flashGasTank['pauseDrop']();	//stop gas tank animation
				}
				
				CursorManager.removeCursor(mChainsawCursorID);	// Remove chainsaw cursor.
				SoundMixer.stopAll();							// Stop all currently playing sounds
				mEngineStopsSound.play();						// Play chainsaw engine stopping sound.
				
				mStartStopButton.label			= "Start";
				
				mChangeLevelButton.enabled		= true;
				mPlayerTextInput.enabled		= true;
			}
			
			// sub-fucntion of endGame() to create and check pieces from free cut level
			private function checkFreeCuts():void{
				// Stores individual pieces to be sorted by cut order in a second pass.
				var pieceStatusArray:Array = new Array;
				
				// For each log
				for (var ii:Number = 0; ii < mLogsPerGame; ++ii) 
				{
					// Sort log's cutlist left to right. Must specify NUMERIC or sort will be by string.
					mLogArray[ii][2].sortOn("mCutX", Array.NUMERIC);
					
					var prevCut:Number	= 0;	// Start at the left edge of the log.
					
					// For each cut position
					for (var j:Number = 0; j < mLogArray[ii][2].length; ++j)
					{
						var length:Number		= 0;		// Length of piece.
						var isEnd:Boolean		= false;	// No end pieces in free cut level.
						var leftToRight:Boolean	= true;		// Measuring left to right.
						
						// Piece number for free cut is in cut order, not location on log.
						//	var pieceNumber:uint	= mLogArray[ii][2][j].mCutNumber + pieceNumberBase;
						
						// Calculate the piece length and transmit to TinkerPlots/Fathom.
						length = mLogArray[ii][2][j].mCutX - prevCut;
						
						var pieceStatus:PieceStatus = 
							new PieceStatus(
								length,							// Piece length.
								ii + 1, 						// Number of log (1 is at top).
								isEnd, 							// True if end piece.
								leftToRight,					// True if cutting left to right.
								prevCut == 0,					// True if measuring on new log for first time.
								mLogArray[ii][2][j].mFuelUsed,	// Raw fuel left at the time of piece creation.
								prevCut,						// Cut before this cut or game end.
								mLogArray[ii][2][j].mCutX,		// X cut location on log. 0 if end piece.
								mLogArray[ii][2][j].mCutNumber,	// Cut number.
								mLogArray
							);
						
						pieceStatusArray.push(pieceStatus);
						prevCut = mLogArray[ii][2][j].mCutX;	// Save previous cut position.
						
						// Calculate the rightmost piece length, if it's the final cut.
						if (j == (mLogArray[ii][2].length - 1))
						{
							// Used to increment next cut numbers and provide sequential pieece numbers.
							++pieceNumberBase;
							var lastLength:Number;
							lastLength = mLogArray[ii][0].width - mLogArray[ii][2][j].mCutX - 10; //subtract 10 to account for curve on log face
							var endPieceStatus:PieceStatus = 
								new PieceStatus(
									lastLength,						// Piece length.
									ii + 1, 						// Number of log (1 is at top).
									isEnd, 							// True if end piece.
									leftToRight,					// True if cutting left to right.
									false,							// True if measuring on new log for first time.
									mLogArray[ii][2][j].mFuelUsed,	// Raw fuel left at the time of piece creation.
									prevCut,						// Cut before this cut or game end.
									0,								// X cut location on log. 0 if end piece.
									mLogArray[ii][2][j].mCutNumber,	// Cut number.
									mLogArray
								);
							pieceStatusArray.push(endPieceStatus);
						}
					}
				}
				
				// In second pass, sort pieces by cut number and use these cut numbers to 
				// calculate piece numbers, taking end pieces into account.
				pieceStatusArray.sortOn("mCutNumber", Array.NUMERIC);
				
				// Used in calculating piece numbers.
				var pieceNumberBase:uint	= mPrevPieceNumber;
				var prevCutNumber:uint		= 0;
				
				// For each cut position
				for (var k:Number = 0; k < pieceStatusArray.length; ++k)
				{
					if (pieceStatusArray[k].mCutNumber == prevCutNumber)
						++pieceNumberBase;
					
					// Mark logs with '√', 'X', or 'O'
					recordPieceStatus(pieceStatusArray[k], pieceNumberBase);
					
					prevCutNumber = pieceStatusArray[k].mCutNumber; // Track previous cut number.
				}
				
				/**
				 * Code to send small chunks of data to dg at a time
				 */
				var intID:uint = setInterval(sendChunk, 500); //sends a chunk of data every 500ms
				const chunkSize:int = 10;
				var start:int=0, end:int=chunkSize; //send 10 at a time
				function sendChunk():void
				{
					for (var k:Number = start; k<end && k<pieceStatusArray.length; ++k)
					{
						if (pieceStatusArray[k].mCutNumber == prevCutNumber)
							++pieceNumberBase;
						
						// Transmit to TinkerPlots/Fathom.
						transmitPieceStatus(pieceStatusArray[k], pieceNumberBase);
						
						prevCutNumber = pieceStatusArray[k].mCutNumber; // Track previous cut number.
					} //End for()
					
					start+=chunkSize;
					end+=chunkSize;
					if(end>pieceStatusArray.length) end=pieceStatusArray.length;
					if(start>=end) clearInterval(intID);
				} //End sendChunk()
				
			}
			
			/**
			 * Guesses the cut style of the player using data stored in CutProperties objects,
			 * created after each cut. Only matters for Free Cut levels.
			 * @author Ryan
			 */
			private function determineCutStyle():String
			{
				mCutStyleValue.text = "Cut Strategy:  "
				var strategy:int = CutProperties.determineStrategy(mCutsArray);
				switch(strategy)
				{
					case 0:
						mCutStyleValue.text += "Single, down";
						break;
					case 1:
						mCutStyleValue.text += "Single, downup";
						break;
					case 2:
						mCutStyleValue.text += "Multi, down";
						break;
					case 3:
						mCutStyleValue.text += "Multi, downup";
						break;
					default:
						mCutStyleValue.text += "Other";
				}
				
				//Important - we need to clear out the array each time
				while(mCutsArray.length>0)
				{
					mCutsArray.pop();
				}
				
				return mCutStyleValue.text;
			}
			
			// timerListener() is called to update the fuel level display and game duration.
			// now just updates the mFuelUsed
			protected function timerListener(iEvent:TimerEvent):void
			{
				// Increment the units of fuel used at the start, as this amount was used since 
				// the start or previous timer interval.
				++mFuelUsed;
				// If there is still fuel left, provide updates and effects used during game play.
				if (mFuelUsed >= kTotalUpdates){
					// Fuel has been consumed and game is over.
					endGame();					
				}				
			}
			
			// cutLogFreely() performs all cutting operations when the passed in log is cut at 
			// the x position being passed in. The x position is in the coordinate system
			// of the log being cut.
			protected function cutLogFreely(	iLog:MovieClip, 
												iLocalX:Number,
												iTopToBottom:Boolean = true
			):void
			{
				// Don't cut if chainsaw is not running and we're not in practice mode.
				var iLogNumber:int = iLog['getLogNum']();
				if (!practice)
				{
					if (!mFuelTimer.running)
						return;
				}
				
				++mCutNumber;	// Increment cut number.
				
				// Add X position of cut and fuel used to log's cut list.
				var cutAndFuelUsed:FuelUsedAtCut = new FuelUsedAtCut(iLocalX, mFuelUsed, mCutNumber);
				mLogArray[iLogNumber-1][2].push(cutAndFuelUsed);
				
				//store the cut properties
//				var currentLog:MovieClip = mLogArray[iLogNumber-1][0] as MovieClip;
//				var top_bottom:Boolean = currentLog['topToBottomCut']();
				var top_bottom:Boolean = iLog['isTopToBottomCut']();
				var prop:CutProperties = new CutProperties(mCutNumber, iLogNumber, iLocalX, top_bottom);
				mCutsArray.push(prop);
			}
			
			// onChangePlayerTextInput() is called whenever the text is changed in the mPlayerTextInput control.
			protected function onChangePlayerTextInput(/*iEvent:KeyboardEvent*/):void
			{
				mPlayersName = mPlayerTextInput.text;

				//remove focus when user hits enter (purely visual effect)
				//if(iEvent.keyCode == 13) {
				//	mPlayerTextInput.focusManager.hideFocus();
				//}
			}
			
			// Player has pressed the Start/Stop button
			protected function onClickStartStopButton(event:MouseEvent):void
			{
				if(mStartStopButton.label == "Stop")
				{
					endGame();
					mStartStopButton.label = "Start";
				}
				else
				{
					startGame();
					mStartStopButton.label = "Stop";
				}
			}
			
			// onClickChangeLevelButton() allows the user to change the game level.
			protected function onClickChangeLevelButton(event:MouseEvent):void
			{
				clearGame(mGameLevel); // Clear any remnants of last game and reset game.
				
				chooseGameLevel();
			}
			
			protected var allAssetsLoaded:Boolean = false;
			protected var recheckTimer:Timer = new Timer(1000, 0);
			
			protected function checkSWFLoaders(e:Event = null):void{
				if(flashGasTank && dynamicLog1 && dynamicLog2 && dynamicLog3 && dynamicLog4){
					allAssetsLoaded = true;
				}
				startUp();
			}
			
			
			//initialize Tristan's gas tank SWF
			protected function initGasTank():void{
				flashGasTank = mFuelIcon.content as MovieClip;
			}
			
			protected function initLog1():void{
				dynamicLog1 = mDynamicLog.content as MovieClip;
				dynamicLog1.enabled = false;
				dynamicLog1.mouseChildren = false;
				dynamicLog1['setLogNum'](1);
			}
			protected function initLog2():void{
				dynamicLog2 = mDynamicLog2.content as MovieClip;
				dynamicLog2.enabled = false;
				dynamicLog2.mouseChildren = false;
				dynamicLog2['setLogNum'](2);
			}
			protected function initLog3():void{
				dynamicLog3 = mDynamicLog3.content as MovieClip;
				dynamicLog3.enabled = false;
				dynamicLog3.mouseChildren = false;
				dynamicLog3['setLogNum'](3);
			}
			protected function initLog4():void{
				dynamicLog4 = mDynamicLog4.content as MovieClip;
				dynamicLog4.enabled = false;
				dynamicLog4.mouseChildren = false;
				dynamicLog4['setLogNum'](4);
			}
			
			//mouse up on currently enabled log, sends to the log's SWF for handling
			protected function logUp(e:MouseEvent):void{
				e.currentTarget.content['logUp'](e);
				//trace("logUp");
				sawdustParticles['stopParticleAnim']();
			}
			//mouse in event on currently enabled log
			protected function logIn(e:MouseEvent):void{
				if(e.buttonDown && e.currentTarget.content.enabled){
					
					//					sawdustParticles.x = e.stageX+10; //TODO REMOVE
					//					sawdustParticles.y = e.stageY+10;
					
					var offsetX:Number = e.localX - e.currentTarget.content.x;
					var offsetY:Number = e.localY - e.currentTarget.content.y;
					e.currentTarget.content['logInMod'](offsetX, offsetY);
					
					currentCutStartPoint = e.localX; //save where the cut was started
					
					//prevent showing particles if player is cutting wrong side of log
					if(e.currentTarget.content['canCutAt'](offsetX))
						sawdustParticles['startParticleAnim']();
				}
			}
			//mouse out event on enabled log
			protected function logOut(e:MouseEvent):void{
				sawdustParticles['stopParticleAnim']();
				var offsetX:Number = e.localX - e.currentTarget.content.x;
				var offsetY:Number = e.localY - e.currentTarget.content.y;
				if(e.currentTarget.content['logOutMod'](offsetX,offsetY)){
					if(mGameLevel >= kFreeCutLevel){
						cutLogFreely(e.currentTarget.content, e.currentTarget.content['StartCutPt'].x);
					}else{
						//Should not happen, left over from directional cut mode which has been removed
					}
				}
			}
			//mouse over event for updating cut as they go through the log
			protected function logMidLog(e:MouseEvent):void{				
				if (e.currentTarget.content.enabled){
					var offsetX:Number = e.localX - e.currentTarget.content.x;
					var offsetY:Number = e.localY - e.currentTarget.content.y;
					e.currentTarget.content['midLogMod'](offsetX,offsetY);
				}
				
				if(Math.abs(e.localX - currentCutStartPoint) > 20) logUp(e); //checks to see how far the mouse has moved since beginning to cut
			}
			
			protected function updateVolume(vol:Number):void
			{
				//cannot do: SoundMixer.soundTransform.volume = vol/100;
				var st:SoundTransform = SoundMixer.soundTransform;
				st.volume = vol/100; //changes range [0-100] (slider position) to [0-1] (volume level)
				SoundMixer.soundTransform = st;
				
				//adjust the volume level icon
				if(vol < 33){
					mVolumeImage.source = mLowVolumeIcon;
				} else if(vol > 66) {
					mVolumeImage.source = mVolumeIcon;
				} else {
					mVolumeImage.source = mHalfVolumeIcon;
				}
			}
		]]>
	</fx:Script>
	<s:BorderContainer id="StatusBar" x="5" y="0" width="{this.minWidth - 10}" height="30" cornerRadius="3">
		<s:backgroundFill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xf0f0f0"/>
				<s:GradientEntry color="0xd8d8d8"/>
			</s:LinearGradient>
		</s:backgroundFill>
		
		<s:Label id="mLevelLabel" x="5" y="3" text="PRACTICE LEVEL" width="318" textAlign="left" height="26" fontSize="14" verticalAlign="middle" fontWeight="bold" fontFamily="Georgia" fontStyle="normal" color="#669035"/>
		
		<s:Label id="mPlayersNameLabel" x="280" y="9" color="#7B9453" fontFamily="Arial" fontSize="16" fontWeight="bold" text="Player's Name:" />
		<s:TextInput id="mPlayerTextInput" x="400" y="2" width="110" height="24" change="onChangePlayerTextInput()" color="#7B9453" enabled="true"
					 fontSize="16" fontWeight="bold" text="Player" textAlign="left"/>
		
		<s:Image id="mVolumeImage" x="620" y="6" source="{mVolumeIcon}"/>
		<s:HSlider id="mVolumeSlider" x="645" y="9" width="80" change="updateVolume(mVolumeSlider.value)" dataTipPrecision="0" maximum="100" value="50"/>
	</s:BorderContainer>
	
	<s:Button id="mStartStopButton" x="20" y="46" width="100" height="30" label="Start" click="onClickStartStopButton(event)" enabled="true" fontSize="14" fontWeight="bold"/>
	<s:Button id="mChangeLevelButton" x="20" y="86" width="100" height="30" label="Change Level" click="onClickChangeLevelButton(event)" enabled="true" fontSize="12" fontWeight="bold"/>
	
	<s:BorderContainer id="mLogYardContainer" x="134" y="46" width="600" height="364" backgroundColor="#EAD1AA" borderVisible="false">
		<s:SWFLoader		id="mDynamicLog" x="-5" y="0" source="chainsaw_assets/DynamicLog.swf" complete="initLog1()" mouseUp="logUp(event)" mouseOver="logIn(event)" mouseOut="logOut(event)" mouseMove="logMidLog(event)" mouseChildren="false"/>
		<s:SWFLoader		id="mDynamicLog2" x="-5" y="0" source="chainsaw_assets/DynamicLog.swf" complete="initLog2()" mouseUp="logUp(event)" mouseOver="logIn(event)" mouseOut="logOut(event)" mouseMove="logMidLog(event)"/>
		<s:SWFLoader		id="mDynamicLog3" x="-5" y="0" source="chainsaw_assets/DynamicLog.swf" complete="initLog3()" mouseUp="logUp(event)" mouseOver="logIn(event)" mouseOut="logOut(event)" mouseMove="logMidLog(event)"/>
		<s:SWFLoader		id="mDynamicLog4" x="-5" y="0" source="chainsaw_assets/DynamicLog.swf" complete="initLog4()" mouseUp="logUp(event)" mouseOver="logIn(event)" mouseOut="logOut(event)" mouseMove="logMidLog(event)"/>
		<s:Group			id="mStatusLabelHolder" x="0" y="0" width="597" height="324" visible="false"/>
	</s:BorderContainer>
	
	<s:BorderContainer id="UI_Elements" x="0" y="156" width="134" height="274" backgroundColor="#EAD1AA" borderVisible="false">
		<s:Label id="mFuelLabel" x="15" y="-15" fontSize="16" fontWeight="bold" text="Fuel:"/>
		<s:SWFLoader id="mFuelIcon" x="15" y="5" width="106" height="118" complete="initGasTank()" source="chainsaw_assets/GasTank.swf" />
		<s:Label id="mReferenceLengthLabel" x="13" y="156" fontSize="16" fontWeight="bold" text="Target Length:"/>
		<mx:Image id="mTapeMeasure" x="15" y="182" source="{mTapeMeasureImage}"/>
		<mx:Image id="mReferenceLengthImage" x="15" y="216" source="{mLengthImage}"/>
	</s:BorderContainer>
	
	<mx:UIComponent	id="uic" x="0" y="0"/>
	<s:BorderContainer id="mResultsOverlay" x="134" y="46" width="{745-134}" height="{410-46}" alpha=".50" backgroundColor="#FFFFFF" borderColor="#FFFFFF" visible="false" click="{mResultsOverlay.visible=false}">
		<s:Label id="mAcceptedPiecesValue" x="270" y="{60-46}" text="0" fontSize="16" verticalAlign="middle" fontWeight="bold" width="300" textAlign="left"/>
		<s:Label id="mFuelLeftValue" x="270" y="{145-46}" text="0" fontSize="16" verticalAlign="middle" fontWeight="bold" width="300" textAlign="left" visible="true"/>
		<s:Label id="mCutStyleValue" x="270" y="{225-46}" text="OTHER" fontSize="16" verticalAlign="middle" fontWeight="bold" width="300" textAlign="left" visible="true"/>
		<s:Label id="mScoreValue"    x="270" y="{300-46}" fontSize="30" fontWeight="bold" textAlign="left" text="?"/>
		<!-- <s:Label id="continue_msg"   x="404" y="370" text="(Click anywhere to continue)"/> -->
	</s:BorderContainer>
	
	<s:Label id="mVersionLabel" x="580" y="386" width="160" color="#666666" initialize="mVersionLabel.text=getVersion()" textAlign="right" verticalAlign="bottom"/>
	
	<!-- Loading Screen of Safety -->
	<s:BorderContainer id="LoadWall"	x="0" y="0" width="{this.minWidth}" height="{this.minHeight}" visible="true" >
		<s:backgroundFill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xEAD1A9"/>
				<s:GradientEntry color="0xBBA178"/>
			</s:LinearGradient>
		</s:backgroundFill>
		<s:Label id="topLabel" text="Loading..." x="0" y="200"  fontSize="20" fontFamily="Arial" fontWeight="bold" textAlign="center" width="745" color="0x000000"/>
	</s:BorderContainer>
	
	<!-- Error message for bad version of flash player -->
	<s:BorderContainer id="BrickWall"	x="0" y="0" width="{this.minWidth}" height="{this.minHeight}" visible="false" >
		<s:backgroundFill>
			<s:LinearGradient rotation="90">
				<s:GradientEntry color="0xFF0000"/>
				<s:GradientEntry color="0xB40404"/>
			</s:LinearGradient>
		</s:backgroundFill>
		<s:Label id="topLabelError" text="You are using an outdated version of Adobe Flash Player." x="0" y="80"  fontSize="20" fontFamily="Arial" fontWeight="bold" textAlign="center" width="745" color="0xffffff"/>
		<s:Label id="midLabelError" text="{'ChainSaw requires Flash Player '+ MINIMUM_REQUIREMENTS +' or later.'}" x="0" y="170"  fontSize="15" fontFamily="Arial" textAlign="center" width="745" color="0xffffff"/>
		<s:Label id="midLabel2Error" text="{'You are currently using Flash Player ' + VersionChecker.getVersion()}" x="0" y="190"  fontSize="15" fontFamily="Arial" textAlign="center" width="745" color="0xffffff"/>
		<s:Button id = "upgradeButton" x="{(745-350)/2}" y="250"  click="VersionChecker.openAdobeWebsite()" label="Upgrade Flash Player" width="350" height="50" fontSize="25" enabled="true"/>
		<s:Button id = "ignoreButton" x="{(745-350)/2}"  y="310"  click="checkSWFLoaders()" label="Ignore Warning" width="350" height="30" fontSize="12" enabled="true"/>
		
	</s:BorderContainer>
	
	
	
	
</s:Application>
