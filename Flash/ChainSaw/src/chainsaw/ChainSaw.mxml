<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   minWidth="600" minHeight="600" pageTitle="Chain Saw"
			   creationComplete="startUp( )">

	<fx:Script>
		<![CDATA[
			import assets.*;
			
			import chainsaw.GameLevelWindow;
			
			import com.kcpt.scriptInterface.ScriptInterface;
			
			import flash.media.Sound;
			import flash.media.SoundMixer;
			
			import mx.core.UIComponent;
			import mx.managers.CursorManager;
			import mx.managers.CursorManagerPriority;
			import mx.managers.PopUpManager;
			
			import spark.components.TitleWindow;
			import spark.core.SpriteVisualElement;
			import spark.events.TextOperationEvent;
			
			public var flashGasTank:MovieClip;
			public var sawdustParticles:ParticleLauncher = new ParticleLauncher();
			public var dynamicLog1:MovieClip;
			public var dynamicLog2:MovieClip;
			public var dynamicLog3:MovieClip;
			public var dynamicLog4:MovieClip;
			
			public static const VERSION:String 			= "v. 11/30/11";// A string containing the version number (should be manually incremented for each build)
			
			public static const kTimeLimit:Number		= 20;		// Number of seconds player has to cut logs.
			public static const kUpdatesPerSecond:Number= 4;		// Fuel tank updates per second.
			public static const kTotalUpdates:Number	= kTimeLimit * kUpdatesPerSecond; // Total number of updates.
			public static const kUpdateInterval:Number	= 1000 / kUpdatesPerSecond; // Milliseconds between updates.
			public static const kReferenceLength:Number	= 75;		// Reference length in pixels of 16" piece.
			public static const kPercentAllowance:Number= ((1.0/8.0)*100);		// Percent allowed above or below accepted cut length.
			public static const kConvertToInches:Number	= 16.0/kReferenceLength;// Used to convert pixel length to 16".
			public static const kCutEdgeLeftXOffset:int	= -75;		// X offset of left "Cut Edge" Label.
			public static const kCutEdgeRightXOffset:int= 0;		// X offset of right "Cut Edge" Label.
			public static const kCutEdgeLeftYOffset:int	= -2;		// X offset of left "Cut Edge" Label.
			public static const kCutEdgeRightYOffset:int= -2;		// X offset of right "Cut Edge" Label.
			public static const kFuelCapacity:Number	= 40;		// Units of fuel when full.
			
			// Levels
			public static const kPracticeLevel:uint		  = 0;		// Practice level.
			public static const kDirectionalCutLevel:uint = 1;		// Directional cut level.
			public static const kFreeCutLevel:uint		  = 2;		// Free cut level.
			
			// Collection names according to level played.
			public static const kCollectionDirCutPieces:String	= "CutPieces - Directional Cut Level";
			public static const kCollectionFreeCutPieces:String	= "CutPieces - Free Cut Level";
			public static const kCollectionDirCutGames:String	= "Games - Directional Cut Level";
			public static const kCollectionFreeCutGames:String	= "Games - Free Cut Level";
			
			// Strings indicating accptance/rejection status of cut pieces.
			public static const kAcceptString:String		= "Yes";
			public static const kRejectShortString:String	= "No-Short";
			public static const kRejectLongString:String	= "No-Long";
			
			// Minimum accepted cut length in pixels.
			public static const kMinCutLength:Number	= kReferenceLength * (1.0 - (kPercentAllowance / 100));	
			// Maximum accepted cut length in pixels.
			public static const kMaxCutLength:Number	= kReferenceLength * (1.0 + (kPercentAllowance / 100));	
			
			// Create a timer to update the fuel level display and game duration.
			private var mFuelTimer:Timer = new Timer(kUpdateInterval, kTotalUpdates);
			
			// Used for drawing the down arrow.
			private var mArrowSprite:SpriteVisualElement = new SpriteVisualElement();
			private var mArrowBitmapData:BitmapData;
			
//			//the sawdust pile
//			private var mSawdustSprite:SawdustSprite = new SawdustSprite();

			private var mFirstGame:Boolean			= true;	// Used for initial operations.
			private var mGameLevel:uint				= 3;	// Current game level. --init as 3 to force it to go through init loops in game select
			private var mPrevLevel:uint				= 3;	// Used to track level changes.
			private var mDirCutCollectionCreated:Boolean = false;	// Collection created on first play at each level.
			private var mFreeCutCollectionCreated:Boolean = false;	// Collection created on first play at each level.
			private var mLevelWindow:GameLevelWindow;		// The modal window for choosing a game level.
			private var mLogsPerGame:uint			= 4;	// Number of logs being used in each game.
			private var mFuelUsed:Number			= 0;	// Stores how many units of fuel have been used.
			private var mChainsawCursorID:Number	= 0;	// Holds a cursor ID.
			private var mGameNumber:uint			= 0;	// Keeps track of games since app launch. Practice level ignored.
			private var mCurrentLog:uint			= 1;	// Current log being cut. 1 based.
			private var mLastLog:uint				= 0;	// Number of log at most recent cut. 1 based. 0 before cuts.
			private var mLastCutX:Number			= 0;	// X location of most recent cut.
			private var mLeftToRight:Boolean		= true;	// Current cutting direction of log.
//			private var mStatusArray:Array = new Array;		// Holds status labels put on cut logs.
			private var mPiecesAccepted:uint		= 0;	// Number of cut pieces accepted.
			private var mPiecesRejected:uint		= 0;	// Number of cut pieces rejected.
			private var mPlayersName:String			= "Player"; // Stores player's name.
			
			// These arrays store the details of individual logs for access by all who need to know.
			private var mLogDetails1:Array;
			private var mLogDetails2:Array;
			private var mLogDetails3:Array;
			private var mLogDetails4:Array;
			
			// Stores array of logs/logtops used in game.
			private var mLogArray:Array;
			
			// Holds piece number beginning at 1 for each cut piece since start of application.
			// Transmitted to TinkerPlots/Fathom. Practice level ignored.
			private var mPieceNumber:uint			= 0;	
			
			// Holds value of piece count as of previous game. Used in free cut levels to calculate
			// piece numbers in cut order rather than location on log.
			private var mPrevPieceNumber:uint		= 0;
			
			// Holds cut number beginning at 1 for cuts made in free cut levels.
			private var mCutNumber:uint				= 0;
			
			// Embed the cursor symbol.
			// From http://www.rw-designer.com/cursor-download.php?id=2222 on 12/11/2010
			// Converted from .ani format to .png.
			[Embed(source="../assets/Chainsaw Cursor 2.png")]
			private var mChainsawCursor:Class;

			// Embed the reference length image file.
			[Embed(source="../assets/Reference Length 75 Pixels.png")]
			[Bindable]
			private var mLengthImage:Class;
			
			// Embed tape measure image
			[Embed(source="../assets/tape_measure.png")]
			[Bindable]
			private var mTapeMeasureImage:Class;
			
			// Embed the down arrow image file.
			[Embed(source="../assets/Down Arrow Small.png")]
			[Bindable]
			private var mDownArrowImage:Class;
			
			// Embed sawdust pile image
			[Embed(source="../assets/sawdust_pile.png")]
			[Bindable]
			private var mSawdustPile:Class;
			
			// Embed volume icon
			[Embed(source="../assets/Volume.png")]
			[Bindable]
			private var mVolumeIcon:Class;
			
			
			/*
			Actual sound files replaced with a 1-second dummy file to allow project to compile without removing sound-related code
			*/
			[Embed("../src/assets/Chainsaw Sound Longer.mp3")]
//			[Embed("../src/assets/dummy.mp3")]
			private var ChainsawSoundMP3:Class;
			private var mChainsawSound:Sound = new ChainsawSoundMP3() as Sound;
			
			[Embed("../src/assets/Chainsaw Engine Stops no Fade In.mp3")]
//			[Embed("../src/assets/dummy.mp3")]
			private var EngineStopSoundMP3:Class;
			private var mEngineStopsSound:Sound = new EngineStopSoundMP3() as Sound;

			// startUp() is called when the creation of this class is complete
			// and sets up necessary parameters for game initiation.
			private	function startUp():void
			{
			
				// Arrays store individual cuts on each log for use in free cut levels.		
				mLogDetails1 = new Array(dynamicLog1, null, new Array());
				mLogDetails2 = new Array(dynamicLog2, null, new Array());
				mLogDetails3 = new Array(dynamicLog3, null, new Array());
				mLogDetails4 = new Array(dynamicLog4, null, new Array());
				// Stores array of logs/logtops used in game.
				// Create new log array and add log/logtop to array.
				mLogArray = new Array(mLogDetails1, mLogDetails2, mLogDetails3, mLogDetails4);
				
				// Load and draw the bitmap of the cut location arrow.
				mArrowBitmapData = new mDownArrowImage().bitmapData;
				mArrowSprite.blendMode = "multiply";
				mArrowSprite.graphics.clear();
				mArrowSprite.graphics.beginBitmapFill(mArrowBitmapData);
				mArrowSprite.graphics.drawRect(0, 0, mArrowBitmapData.width, mArrowBitmapData.height);
				mArrowSprite.graphics.endFill();
				mArrowSprite.visible = false;
				mLogYardContainer.addElement(mArrowSprite);
				
				// Randomize log array.
				randomizeLogSizePosition();
				
				uic.addChild(sawdustParticles);
				sawdustParticles.enabled = false;
				sawdustParticles.mouseChildren = false;
				
//				//TODO sawdust pile sprite
//				mSawdustSprite.init();
//				mSawdustSprite.scaleX = .2;
//				mSawdustSprite.scaleY = .2;
//				mSawdustSprite.x = 100;
//				//addElement(mSawdustSprite); //TODO

				mLevelWindow = new GameLevelWindow();
				levelSelected(kPracticeLevel);
			}
			
			// clearGame() resets the game according to the current level and clears remnants of
			// the previous game, if any.
			private function clearGame(iNewGameLevel:uint):void
			{
				// Move "Cut Edge" labels to first log.
				mCutEdgeLeftLabel.x		= mLogArray[0][0].x + kCutEdgeLeftXOffset;
				mCutEdgeLeftLabel.y		= mLogArray[0][0].y + kCutEdgeLeftYOffset;
				mCutEdgeRightLabel.x	= mLogArray[0][0].x + mLogArray[0][0].width + kCutEdgeRightXOffset;
				mCutEdgeRightLabel.y	= mLogArray[0][0].y + kCutEdgeRightYOffset;
				//remove all Status Labels from the holder and hide the holder
				mStatusLabelHolder.visible = false;
				mStatusLabelHolder.removeAllElements();
				
				// Enable/show log cutting edge. Clear all cuts in array.
				for (var i:Number = 0; i < mLogsPerGame; ++i)
				{
					if (iNewGameLevel == kFreeCutLevel)
					{
						// Clear cut lists on log.
						while (mLogArray[i][2].length > 0)
							mLogArray[i][2].pop();
					}	
				}
				mAcceptedPiecesValue.visible = false; // Hide number of accepted pieces until game is complete.
				
				flashGasTank['resetDrop'](); // Set fuel height back to top of fuel container.
				mFuelUsed = 0;		// Initialize the fuel used to zero.
			}
			
			// chooseGameLevel() listens for clicks on the level dialog's level buttons.
			private function chooseGameLevel():void 
			{
				var isModal:Boolean = true;
				PopUpManager.addPopUp(mLevelWindow, this, isModal); 
				
				PopUpManager.centerPopUp(mLevelWindow);		// Center the window.
				mLevelWindow.closeButton.visible = false;	// Hide the close button.
				
				mLevelWindow["mPracticeLevelButton"].addEventListener("click", practiceLevel);
				mLevelWindow["mDirectionalCutButton"].addEventListener("click", directionalCutLevel);
				mLevelWindow["mFreeCutButton"].addEventListener("click", freeCutLevel);
			}
					
			// practiceLevel() sets the current game level to practice.
			private function practiceLevel(iEvent:Event):void 
			{
				levelSelected(kPracticeLevel);
			}
			
			// directionalCutLevel() sets the current game level to directional cut.
			private function directionalCutLevel(iEvent:Event):void 
			{
				levelSelected(kDirectionalCutLevel);
			}
			
			// freeCutLevel() sets the current game level to free cut.
			private function freeCutLevel(iEvent:Event):void 
			{
				levelSelected(kFreeCutLevel);
			}
			
			//level select redirected from button calls with level number - sets up the play field for each level
			private function levelSelected(levelNum:int):void
			{
				mPrevLevel = mGameLevel; // Track game level change.
				mGameLevel = levelNum; // Set game level
				PopUpManager.removePopUp(mLevelWindow); // Close the modal window
				
				// Only reset if user selects different level (Otherwise it will be reset when they click start)
				if(mPrevLevel != mGameLevel) 
				{
					randomizeLogSizePosition(); // Randomize logs
					
					if (levelNum == kFreeCutLevel) // If Free Cut level was selected
					{
						clearGame(kFreeCutLevel); 
						dynamicLog1['init'](0,dynamicLog2); //send cut direction and link to next log
						dynamicLog2['init'](0,dynamicLog3); // cut direction 1=LtoR, -1=RtoL, 0 = free
						dynamicLog3['init'](0,dynamicLog4);
						dynamicLog4['init'](0,null);
						
						mCutEdgeLeftLabel.visible	= false; // Hide left "Cut Edge" label.
						mCutEdgeRightLabel.visible	= false; // Hide right "Cut Edge" label.
						mArrowSprite.visible		= false; // Hide cut location arrow.
						
						if (!mFreeCutCollectionCreated)
						{
							createCollectionMod(kCollectionFreeCutPieces, kCollectionFreeCutGames);
							mFreeCutCollectionCreated = true;
						}
						mLevelLabel.text = "FREE CUT LEVEL";
					}
					else // If Practice or Directional Cut level was selected
					{
						clearGame(0);
						dynamicLog1['init'](1,dynamicLog2); //send cut direction and link to next log
						dynamicLog2['init'](-1,dynamicLog3); // cut direction 1=LtoR, -1=RtoL, 0 = free
						dynamicLog3['init'](1,dynamicLog4);
						dynamicLog4['init'](-1,null);
						
						mCutEdgeLeftLabel.visible	= true;	// Show left "Cut Edge" label.
						mCutEdgeRightLabel.visible	= true; // Show right "Cut Edge" label.
						mArrowSprite.visible		= true; // Show cut location arrow.
						
						if (!mDirCutCollectionCreated)
						{
							createCollectionMod(kCollectionDirCutPieces, kCollectionDirCutGames);
							mDirCutCollectionCreated = true;
						}
						
						if (levelNum == kDirectionalCutLevel)	mLevelLabel.text = "DIRECTIONAL CUT LEVEL";
						if (levelNum == kPracticeLevel)			mLevelLabel.text = "PRACTICE LEVEL";
					}
				}
			}
			
			// randomizeLogOrder() randomly resorts the logs in the log array.
			protected function randomizeLogSizePosition():void
			{
				dynamicLog1.x = Math.random()*120+40;
				dynamicLog1.y = 38;
				dynamicLog1['drawNewLog'](pickLogLength());
				
				dynamicLog2.x = Math.random()*120+40;
				dynamicLog2.y = 107;
				dynamicLog2['drawNewLog'](pickLogLength());
				
				dynamicLog3.x = Math.random()*120+40;
				dynamicLog3.y = 176;
				dynamicLog3['drawNewLog'](pickLogLength());
				
				dynamicLog4.x = Math.random()*120+40;
				dynamicLog4.y = 245;
				dynamicLog4['drawNewLog'](pickLogLength());
				
				// Move "Cut Edge" labels to first log.
				mCutEdgeLeftLabel.x		= mLogArray[0][0].x + kCutEdgeLeftXOffset;
				mCutEdgeLeftLabel.y		= mLogArray[0][0].y + kCutEdgeLeftYOffset;
				mCutEdgeRightLabel.x	= mLogArray[0][0].x + mLogArray[0][0].width + kCutEdgeRightXOffset;
				mCutEdgeRightLabel.y	= mLogArray[0][0].y + kCutEdgeRightYOffset;
				
				mArrowSprite.x = mLogArray[0][0].x - mArrowBitmapData.width + 5;	// Start with arrow pointing at left edge of first log.
				mArrowSprite.y = mLogArray[0][0].y - (mArrowBitmapData.height+2);	// Start at top edge of first log.
			}
			
			/**
			 * Helper function for randomizeLogSizePosition() that returns a length as an int that
			 * is long enough for 4 or 5 logs with a little extra padding (1/2 to 6/7 of a log length).
			 * 
			 * @return length
			 * @author Ryan
			 */
			private function pickLogLength():int
			{
				var length:int;
				length = kReferenceLength*4;									// The base length (4 pieces long)
				length+= Math.round(Math.random())*kReferenceLength;			// Randomly add or don't add a 5th piece to the length 
				length+= Math.ceil(Math.random()*(kReferenceLength*0.36)+0.5);	// Finally add 1/2 to 6/7 of a piece to the log as padding
				return length;	// Return the length
			}
			
			//called by directionalCutLevel() and freeCutLevel() to initially create TinkerPlot/DG collection spaces
			private function createCollectionMod(collection1:String, collection2:String):void
			{
				ScriptInterface.NewCollectionWithAttributes(
					"Cuts",
					[
						"PieceNum",			// Piece number starting with 1 since launch of application.
						"Player",			// Name of the player.
						"GameNum",			// Game number starting with 1 since launch of application.
						"Length",			// Length of cut piece.
						"Accepted",			// True if cut piece is within accepted range of cut length.
						"EndPiece",			// Yes if this piece is an end piece.
						"LogNum",			// Number of log from which piece was cut.
						"FuelLeftAmount",	// Raw amount of fuel left at the time of piece creation.
						"FuelLeftPercent"	// Percent of fuel left at the time of piece creation.
					]
				);
				
				// Create collection for each game.
				ScriptInterface.NewCollectionWithAttributes(
					"Games",
					[
						"GameNumber",		// Game number starting with 1 since launch of application.
						"GameType",			// Direction Cut or Free Cut
						"Player",			// Name of the player.
						"PiecesAccepted",	// Number of pieces accepted.
						"PiecesRejected",	// Number of pieces rejected.
						"FuelLeftAmount",	// Raw amount of fuel left.
						"FuelLeftPercent"	// Percent of fuel left.
					]
				);
			}
			
			// recordPieceStatus() evaluates the piece's acceptance status and records the outcome
			// by setting a visual marker on each log and also transmitting the info to 
			// Fathom/TinkerPlots.
			protected function recordPieceStatus(iLength:Number,		// Piece length
												 iLogNumber:int, 		// Number of log ( 1 is at top).
												 iIsEndPiece:Boolean, 	// True if end piece.
												 iLeftToRight:Boolean,	// True if cutting left to right.
												 iIsNewLog:Boolean,		// True if measuring on new log for first time.
												 iFuelUsed:Number,		// Raw fuel used at the time of piece creation.
												 iPrevXCut:Number = 0,	// Cut before this cut or game end.
												 iCutX:Number = 0,		// X cut location on log. 0 if end piece.
												 iPieceNumber:uint = 0	// Piece number. If not 0, transmit this number instead of mPieceNumber.
												):void
			{
				var currentLog:MovieClip = mLogArray[iLogNumber-1][0] as MovieClip; // The current log
				var log_length:Number = currentLog['LogLength']; // get the length of the current log
				
				// Not cutting, so don't specify a cut location.
				if (iIsEndPiece) iCutX = 0;
				
				// Create "X" or "√" for piece to indicate rejected or accepted. "O" for remnants.
				var statusLabel:Label	= new Label();
				statusLabel.width		= 14;			// Setting manually, as measureText() fails with Spark Label.
				statusLabel.height		= 14;
				statusLabel.setStyle("fontWeight", "bold");
				statusLabel.setStyle("fontSize", "16");
				statusLabel.setStyle("antiAliasType", "normal");
				statusLabel.setStyle("justificationStyle", "auto");
					
				// Accept cut piece if it falls within accepted range.
				var accepted:Boolean = (iLength >= kMinCutLength) && (iLength <= kMaxCutLength);
				var remnant:Boolean;
				var acceptString:String;
				
				// Check if a piece is a remnant if it is not accepted
				if(!accepted)
				{
					remnant = false; // Initialize to false
					 
					if(iIsEndPiece)
					{
						// if there is not enough room for two cuts at the (but more than one)
						if(iLeftToRight && (log_length - iPrevXCut) < kReferenceLength*2) //left to right cut
						{
							remnant = true;
						}
						else if(iPrevXCut < kReferenceLength*2) //right to left cut
						{
							remnant = true;
						}
					}
					
					if(iLength <= kReferenceLength/2)
					{
						remnant = true;
					}
				}
					
				// Keep track of how many cut pieces are accepted / rejected and set status label text.
				if (accepted)
				{
					if (mGameLevel != kPracticeLevel)
						++mPieceNumber;
					++mPiecesAccepted;
					statusLabel.text	= "√";					// Check mark = OK.
					statusLabel.setStyle("color", "0x00FF00");	// Green = OK.
					acceptString = kAcceptString;
				}
				else if (remnant)
				{
					if (mGameLevel != kPracticeLevel)
						++mPieceNumber;
					//++mPiecesRejected;
					statusLabel.text = "O";
					statusLabel.setStyle("color", "0xFFFF00"); // Yellow
					acceptString = "Remnant"; //TODO report new acceptance status?
				}
				else								
				{
					if (mGameLevel != kPracticeLevel)
						++mPieceNumber;
					++mPiecesRejected;
					statusLabel.text = "X";						// X = not OK.
					statusLabel.setStyle("color", "0xFF0000");	// Red = not OK.
					acceptString = (iLength < kMinCutLength) ? kRejectShortString : kRejectLongString;
				}
				
				// Set y location of status label for cut piece.
				statusLabel.y = (currentLog.height / 2) - (statusLabel.height / 2) + currentLog.y;
				// Set x location of status label for cut piece.
				if (iLeftToRight>0)
				{
					// End piece or cutting along same log as at the last cut.
					if (iIsEndPiece || (!iIsEndPiece && !iIsNewLog))
						statusLabel.x = iPrevXCut + (iLength / 2) - (statusLabel.width / 2)+currentLog.x;
					// Cutting on new log.
					else statusLabel.x = (iLength / 2) - (statusLabel.width / 2)+currentLog.x;
				}
				else  statusLabel.x = iCutX + (iLength / 2) - (statusLabel.width / 2)+currentLog.x;

				//add statusLabel element to holder to be shown later
				mStatusLabelHolder.addElement(statusLabel);
				
				if (mGameLevel != kPracticeLevel)
				{	
					var lengthTwoDecimals:String	= (iLength * kConvertToInches).toFixed(2);
					var fuelLeftFraction:Number		= 1 - (iFuelUsed / kTotalUpdates);
					var fuelLeftAmount:Number		= fuelLeftFraction * kFuelCapacity;
					var fuelLeftPercent:Number		= fuelLeftFraction * 100;
					var pieceNumber:uint 			= iPieceNumber == 0 ? mPieceNumber : iPieceNumber;
					var collectionName:String;
					var isEnd:String = iIsEndPiece ? "Yes" : "No";
					// Send info on cut pieces to TinkerPlots/Fathom.
					if (mGameLevel == kDirectionalCutLevel)
						collectionName = kCollectionDirCutPieces;//TODO replace these AddCaseToCollectionWithValues() calls with a single one
					else
						collectionName = kCollectionFreeCutPieces;
					
					ScriptInterface.AddCaseToCollectionWithValues(
						//kCollectionDirCutPieces,  //**Tristan
						"Cuts",
						[
							pieceNumber,		// Piece number since application launch. Ignore practice level.
							mPlayersName,		// Name of the player.
							mGameNumber,		// Game number starting with 1 since launch of application.  Ignore practice level.
							lengthTwoDecimals,	// Piece length.
							acceptString,		// Status of cut piece.
							isEnd,				// "Yes" if it is an end piece.
							iLogNumber,			// Number of log from which piece was cut.
							fuelLeftAmount,		// Raw fuel left at the time of piece creation.
							fuelLeftPercent		// Percent of fuel left at the time of piece creation.
						]	
					);
				}
			}
			
			// sub-function of endGame(), stops all game functions and enables regular UI items
			private function doEndGameStop():void{
				dynamicLog1.enabled = false;//disable all logs from being cut
				dynamicLog2.enabled = false;
				dynamicLog3.enabled = false;
				dynamicLog4.enabled = false;
				
				mStatusLabelHolder.visible=true;//show all status labels
				mArrowSprite.visible = false; //hide cut place arrow if it is shown
				
				mCutEdgeLeftLabel.visible = false; //hide cut edge labels
				mCutEdgeRightLabel.visible = false;
				
				if (mGameLevel != kPracticeLevel)
				{
					mFuelTimer.stop();													// Stop fuel timer.
					mFuelTimer.removeEventListener(TimerEvent.TIMER, timerListener);	// Stop listening.
					flashGasTank['pauseDrop']();	//stop gas tank animation
				}
				
				CursorManager.removeCursor(mChainsawCursorID);	// Remove chainsaw cursor.
				SoundMixer.stopAll();							// Stop all currently playing sounds
				mEngineStopsSound.play();						// Play chainsaw engine stopping sound.
				
				mStartButton.enabled			= true;
				mChangeLevelButton.enabled		= true;
				mStopButton.enabled				= false;
				mPlayerTextInput.enabled		= true;
			}
			
			// sub-fucntion of endGame() to create and check pieces from free cut level
			private function checkFreeCuts():void{
				// Stores individual pieces to be sorted by cut order in a second pass.
				var pieceStatusArray:Array = new Array;
				
				// For each log
				for (var ii:Number = 0; ii < mLogsPerGame; ++ii) 
				{
					// Sort log's cutlist left to right. Must specify NUMERIC or sort will be by string.
					mLogArray[ii][2].sortOn("mCutX", Array.NUMERIC);
					
					var prevCut:Number	= 0;	// Start at the left edge of the log.
					
					// For each cut position
					for (var j:Number = 0; j < mLogArray[ii][2].length; ++j)
					{
						var length:Number		= 0;		// Length of piece.
						var isEnd:Boolean		= false;	// No end pieces in free cut level.
						var leftToRight:Boolean	= true;		// Measuring left to right.
						
						// Piece number for free cut is in cut order, not location on log.
						//	var pieceNumber:uint	= mLogArray[ii][2][j].mCutNumber + pieceNumberBase;
						
						// Calculate the piece length and transmit to TinkerPlots/Fathom.
						length = mLogArray[ii][2][j].mCutX - prevCut;
						
						var pieceStatus:PieceStatus = 
							new PieceStatus(
								length,							// Piece length.
								ii + 1, 						// Number of log (1 is at top).
								isEnd, 							// True if end piece.
								leftToRight,					// True if cutting left to right.
								prevCut == 0,					// True if measuring on new log for first time.
								mLogArray[ii][2][j].mFuelUsed,	// Raw fuel left at the time of piece creation.
								prevCut,						// Cut before this cut or game end.
								mLogArray[ii][2][j].mCutX,		// X cut location on log. 0 if end piece.
								mLogArray[ii][2][j].mCutNumber	// Cut number. 
							);
						
						pieceStatusArray.push(pieceStatus);
						prevCut = mLogArray[ii][2][j].mCutX;	// Save previous cut position.

						// Calculate the rightmost piece length, if it's the final cut.
						if (j == (mLogArray[ii][2].length - 1))
						{
							// Used to increment next cut numbers and provide sequential pieece numbers.
							++pieceNumberBase;
							var lastLength:Number;
							lastLength = mLogArray[ii][0].width - mLogArray[ii][2][j].mCutX - 10; //subtract 10 to account for curve on log face
							var endPieceStatus:PieceStatus = 
								new PieceStatus(
									lastLength,						// Piece length.
									ii + 1, 						// Number of log (1 is at top).
									isEnd, 							// True if end piece.
									leftToRight,					// True if cutting left to right.
									false,							// True if measuring on new log for first time.
									mLogArray[ii][2][j].mFuelUsed,	// Raw fuel left at the time of piece creation.
									prevCut,						// Cut before this cut or game end.
									0,								// X cut location on log. 0 if end piece.
									mLogArray[ii][2][j].mCutNumber	// Cut number.  
								);
							pieceStatusArray.push(endPieceStatus);
						}
					}
				}
				
				// In second pass, sort pieces by cut number and use these cut numbers to 
				// calculate piece numbers, taking end pieces into account.
				pieceStatusArray.sortOn("mCutNumber", Array.NUMERIC);
				
				// Used in calculating piece numbers.
				var pieceNumberBase:uint	= mPrevPieceNumber;
				var prevCutNumber:uint		= 0;
				
				// For each cut position
				for (var k:Number = 0; k < pieceStatusArray.length; ++k)
				{
					if (pieceStatusArray[k].mCutNumber == prevCutNumber)
						++pieceNumberBase;
					
					// Transmit to TinkerPlots/Fathom.
					recordPieceStatus(	
						pieceStatusArray[k].mLength,			
						pieceStatusArray[k].mLogNumber, 		
						pieceStatusArray[k].mIsEndPiece, 	
						pieceStatusArray[k].mLeftToRight,	
						pieceStatusArray[k].mIsNewLog,		
						pieceStatusArray[k].mFuelUsed,		
						pieceStatusArray[k].mPrevXCut,	
						pieceStatusArray[k].mCutX,		
						pieceStatusArray[k].mCutNumber + pieceNumberBase
					);
					
					prevCutNumber = pieceStatusArray[k].mCutNumber; // Track previous cut number.
				}
			}
			
			
			// endGame() performs all operations necessary when game is complete.
			protected function endGame():void
			{
				doEndGameStop();
				if (mGameLevel == kFreeCutLevel){
					checkFreeCuts();
				}
				// Directional cut mode. Measure end piece if player has already started cutting current log and we run out of fuel
				else if (mCurrentLog == mLastLog && mFuelUsed == kFuelCapacity)
				{
					// Calculate distance from end of log in the direction player was cutting.
					// mCurrentLog begins at 1. Array index begins at 0.
					var woodRemaining:Number	= mLeftToRight? mLogArray[mCurrentLog-1][0].width - mLastCutX -10 : mLastCutX;
					var isEndPiece:Boolean		= true;
					
					// Evaluate the piece's acceptance status and record the outcome by setting a 
					// visual marker on each log and also transmit the info to Fathom/TinkerPlots.
					recordPieceStatus(	
						woodRemaining, 			// Piece length
						mCurrentLog, 			// Number of log ( 1 is at top).
						isEndPiece, 			// True if end piece.
						mLeftToRight, 			// True if cutting left to right.
						mCurrentLog != mLastLog,// True if measuring on new log for first time.
						mFuelUsed,				// Raw fuel used at the time of piece creation.
						mLastCutX);				// X cut location on log. 0 if end piece.
				}
				
				mAcceptedPiecesValue.text		= mPiecesAccepted.toString();	// Update text to number of accepted pieces.
				mAcceptedPiecesValue.visible	= true;	// Reveal number of accepted pieces in this game.
				
				//send game information to TinkerPlots/Fathom
				if (mGameLevel != kPracticeLevel)
				{
					var fuelLeftFraction:Number	= 1 - (mFuelUsed / kTotalUpdates);
					var fuelLeftAmount:Number	= fuelLeftFraction * kFuelCapacity;
					var fuelLeftPercent:Number	= fuelLeftFraction * 100;
					var gameCollectionName:String	
						= (mGameLevel == kFreeCutLevel) ? kCollectionFreeCutGames : kCollectionDirCutGames;
						
					// Send info on games to TinkerPlots/Fathom.
					ScriptInterface.AddCaseToCollectionWithValues(
						//gameCollectionName, //**Tristan
						"Games",
						[
							mGameNumber,		// Game number starting with 1 since launch of application.
							gameCollectionName,	// Game Type
							mPlayersName,		// Name of the player.
							mPiecesAccepted,	// Number of pieces accepted.
							mPiecesRejected,	// Number of pieces rejected.
							fuelLeftAmount,		// Raw amount of fuel left.
							fuelLeftPercent		// Percent of fuel left.
						]	
					);
				}
				
				mPrevLevel 			= mGameLevel;	// Track game level change.
				mPrevPieceNumber	= mPieceNumber;	// Track piece number at the end of the game.
			}
			
			// timerListener() is called to update the fuel level display and game duration.
			// now just updates the mFuelUsed
			protected function timerListener(iEvent:TimerEvent):void
			{
				// Increment the units of fuel used at the start, as this amount was used since 
				// the start or previous timer interval.
				++mFuelUsed;
				// If there is still fuel left, provide updates and effects used during game play.
				if (mFuelUsed >= kTotalUpdates){
					// Fuel has been consumed and game is over.
					endGame();					
				}				
			}
			
			// onClickStartButton() is called whenever the start button is pressed.
			protected function onClickStartButton(iEvent:MouseEvent):void
			{
				mLastLog			= 0;	// Reset last cut log counter.
				mCurrentLog			= 1;	// Reset log counter.
				mLastCutX			= 0;	// Reset X position of most recent cut.
				mPiecesAccepted		= 0;	// Reset number of cut pieces accepted.
				mPiecesRejected		= 0;	// Reset number of cut pieces rejected.
				mLeftToRight		= true;	// Begin cutting left to right.
				mCutNumber			= 0;	// Reset cut number.
				mArrowSprite.visible = true;
				
				// Randomize log array, but not for first game, as it's already random.
				if (!mFirstGame)
				{
					// Don't randomize if this was just done on level change.
					if (mPrevLevel == mGameLevel)
						randomizeLogSizePosition();
				}
				else	mFirstGame = false;
				
				clearGame(mGameLevel); // Clear any remnants of last game and reset game.
				
				mStartButton.enabled		= false;
				mChangeLevelButton.enabled	= false;
				mStopButton.enabled			= true;
				mPlayerTextInput.enabled	= false;
				mChainsawCursorID			= CursorManager.setCursor(mChainsawCursor, CursorManagerPriority.HIGH);
				
				if (mGameLevel != kFreeCutLevel)
				{
					mCutEdgeLeftLabel.visible = true;	//show cut edge labels
					mCutEdgeRightLabel.visible = true;
				}
				
				// Use timer to update the fuel level display and game duration.
				if (mGameLevel != kPracticeLevel)
				{
					// Set game number since app launch when new game starts, not counting practice level).
					++mGameNumber;
					// Set up the fuel timer and visual gas tank
					mFuelTimer.addEventListener(TimerEvent.TIMER, timerListener);
					mFuelTimer.reset();	// Reset the timer to run until fuel runs out.
					mFuelTimer.start(); // Start the timer, now that all variables are set up.
					flashGasTank['initGasTank'](kTimeLimit * 24);
					flashGasTank['startDrop']();
				}
				dynamicLog1.enabled = true;
				if (mGameLevel == kFreeCutLevel){
					dynamicLog2.enabled = true;
					dynamicLog3.enabled = true;
					dynamicLog4.enabled = true;
					mArrowSprite.visible = false;
				}
			}
			
			// cutLogInOrder() performs all cutting operations when the passed in log is cut at 
			// the x position being passed in. The x position is in the coordinate system of the log being cut.	
			protected function cutLogInOrderMod(iLog:MovieClip,
												iLocalX:Number,
												iNextLog:MovieClip = null,
												iTopToBottom:Boolean = true):void
			{
				// Don't cut if chainsaw is not running and we're not in practice mode.
				if (mGameLevel != kPracticeLevel && !mFuelTimer.running)return;
				
				var newArrowXPosition:Number = iLog.x + iLocalX - (0.75*mArrowBitmapData.width);
				
				//get info from the log we are cutting
				iNextLog = iLog['getNextLog']();
				var iLeftToRight:int = iLog['getCutDirection']();
				
				// Only cut in specified direction.
				if ((iLeftToRight>0 && mArrowSprite.x < newArrowXPosition) || 
					(iLeftToRight<0 && mArrowSprite.x > newArrowXPosition))
				{					
					// Calculate distance from end of log in the direction player is cutting.
					var woodRemaining:Number	= iLeftToRight>0? iLog.width - iLocalX -10 : iLocalX;
					
					// If player has wood to cut, the intended cut is not an end piece.
					var isEndPiece:Boolean		= false; 
					
					//Move arrow to cut
					mArrowSprite.x = newArrowXPosition;	// Move arrow to location just selected.
					
					// If there is not enough wood left to do another acceptable cut on this 
					// log or the end piece is within the acceptable length range AND if there
					// remains another log to cut, move the arrow cursor to the next log and 
					// prepare to cut this next log.
					if	(woodRemaining <= kMaxCutLength)
					{	
						isEndPiece			= true;	// Remainder of log counts as an end piece.
						if(iNextLog){
							iLog.enabled		= false;// Stop further cuts on this log.
							iNextLog.enabled	= true;	// Enable cuts on this log.
							
							mArrowSprite.y = iNextLog.y - mArrowBitmapData.height - 7;	// Start at top edge of next log.
							mArrowSprite.x = iNextLog.x - mArrowBitmapData.width + 5;	// Start with arrow pointing at left edge of next log.
							if (iNextLog['getCutDirection']()<0)
								mArrowSprite.x = iNextLog.width+iNextLog.x - (mArrowBitmapData.width) - 5;	// Move to right end of log if just cut left to right.
							
							// Move "Cut Edge" labels to next log.
							mCutEdgeLeftLabel.x		= iNextLog.x + kCutEdgeLeftXOffset;
							mCutEdgeLeftLabel.y		= iNextLog.y + kCutEdgeLeftYOffset;
							mCutEdgeRightLabel.x	= iNextLog.x + iNextLog.width + kCutEdgeRightXOffset;
							mCutEdgeRightLabel.y	= iNextLog.y + kCutEdgeRightYOffset;
							
							++mCurrentLog;				// Increment the current log counter.
						}
					}
					
					var pieceLength:Number	= 0; // Length of piece player has just cut (in pixels).
					if (iLog['getLogNum']() == mLastLog)	// Cutting along same log as at the last cut.
						pieceLength = Math.abs(iLocalX - mLastCutX);
					else
					{
						if (iLeftToRight>0)
							pieceLength = iLocalX;				// First cut from left edge of log.
						else
							pieceLength = iLog.width - iLocalX - 10;	// First cut from right edge of log.
					}
					// Evaluate the piece's acceptance status and record the outcome by setting a 
					// visual marker on each log and also transmit the info to Fathom/TinkerPlots.
					var wasEndPiece:Boolean = false;	// This was not an end piece.
					recordPieceStatus(			
						pieceLength, 			// Piece length
						iLog['getLogNum'](), 			// Number of log ( 1 is at top).
						wasEndPiece, 			// True if end piece.
						iLeftToRight>0, 			// True if cutting left to right.
						(iLog['getLogNum']() != mLastLog),// True if measuring on new log for first time.
						mFuelUsed,				// Raw fuel used at the time of piece creation.
						mLastCutX, 				// Cut before this cut or game end.
						iLocalX);				// X cut location on log. 0 if end piece.
					
					mLastLog	= iLog['getLogNum']();	// Update cut log counter.
					mLastCutX	= iLocalX;		// Update X position of most recent cut.
					
					if (isEndPiece)
					{
						// Evaluate the piece's acceptance status and record the outcome by setting a 
						// visual marker on each log and also transmit the info to Fathom/TinkerPlots.
						recordPieceStatus(
							woodRemaining,	// Piece length
							iLog['getLogNum'](), 	// Number of log ( 1 is at top).
							isEndPiece, 	// True if end piece.
							iLeftToRight>0, 	// True if cutting left to right.
							false, 			// True if measuring on new log for first time.
							mFuelUsed,		// Raw fuel used at the time of piece creation.
							iLocalX);		// Cut before this cut or game end.
						
						//mLeftToRight = !mLeftToRight;	// Was end piece, so next log cuts in opposite direciton.
						
						if(iNextLog == null){			// If no other log to cut and this is an end piece, end game
							endGame();
						}else{
							mLastCutX = iNextLog.x + iNextLog.width;
						}
					}	
					
					
				}
			}
			
			// cutLogFreely() performs all cutting operations when the passed in log is cut at 
			// the x position being passed in. The x position is in the coordinate system
			// of the log being cut.
			protected function cutLogFreely(	iLog:MovieClip, 
												iLocalX:Number,
												iTopToBottom:Boolean = true
											):void
			{
				// Don't cut if chainsaw is not running and we're not in practice mode.
				var iLogNumber:int = iLog['getLogNum']();
				if (mGameLevel != kPracticeLevel)
				{
					if (!mFuelTimer.running)
						return;
				}

				++mCutNumber;	// Increment cut number.
				// Add X position of cut and fuel used to log's cut list.
				var cutAndFuelUsed:FuelUsedAtCut = new FuelUsedAtCut(iLocalX, mFuelUsed, mCutNumber);
				mLogArray[iLogNumber-1][2].push(cutAndFuelUsed);			
			}
			
			// onChangePlayerTextInput() is called whenever the text is changed in the mPlayerTextInput control.
			protected function onChangePlayerTextInput(iEvent:TextOperationEvent):void
			{
				mPlayersName = mPlayerTextInput.text;
			}				

			// Player has pressed the Stop button to end the game.
			protected function onClickStopButton(iEvent:MouseEvent):void
			{
				endGame();
			}

			// onClickChangeLevelButton() allows the user to change the game level.
			protected function onClickChangeLevelButton(event:MouseEvent):void
			{
				chooseGameLevel();
			}

			//initialize Tristan's gas tank SWF
			protected function initGasTank():void{
				flashGasTank = mFuelIcon.content as MovieClip;
			}
			
			protected function initLog1():void{
				dynamicLog1 = mDynamicLog.content as MovieClip;
				dynamicLog1.enabled = false;
				dynamicLog1.mouseChildren = false;
				dynamicLog1['setLogNum'](1);
			}
			protected function initLog2():void{
				dynamicLog2 = mDynamicLog2.content as MovieClip;
				dynamicLog2.enabled = false;
				dynamicLog2.mouseChildren = false;
				dynamicLog2['setLogNum'](2);
			}
			protected function initLog3():void{
				dynamicLog3 = mDynamicLog3.content as MovieClip;
				dynamicLog3.enabled = false;
				dynamicLog3.mouseChildren = false;
				dynamicLog3['setLogNum'](3);
			}
			protected function initLog4():void{
				dynamicLog4 = mDynamicLog4.content as MovieClip;
				dynamicLog4.enabled = false;
				dynamicLog4.mouseChildren = false;
				dynamicLog4['setLogNum'](4);
			}
			
			//mouse up on currently enabled log, sends to the log's SWF for handling
			protected function logUp(e:MouseEvent):void{
				e.currentTarget.content['logUp'](e);
				sawdustParticles['stopParticleAnim']();
			}
			//mouse in event on currently enabled log
			protected function logIn(e:MouseEvent):void{
				if(e.buttonDown && e.currentTarget.content.enabled){
					sawdustParticles.x = e.stageX+10;
					sawdustParticles.y = e.stageY+10;
					sawdustParticles['startParticleAnim']();
					var offsetX:Number = e.localX - e.currentTarget.content.x;
					var offsetY:Number = e.localY - e.currentTarget.content.y;
					e.currentTarget.content['logInMod'](offsetX, offsetY);
				}
			}
			//mouse out event on enabled log
			protected function logOut(e:MouseEvent):void{
				sawdustParticles['stopParticleAnim']();
				var offsetX:Number = e.localX - e.currentTarget.content.x;
				var offsetY:Number = e.localY - e.currentTarget.content.y;
				if(e.currentTarget.content['logOutMod'](offsetX,offsetY)){
					if(mGameLevel == kFreeCutLevel){
						cutLogFreely(e.currentTarget.content, e.currentTarget.content['StartCutPt'].x);
					}else{
						cutLogInOrderMod(e.currentTarget.content, e.currentTarget.content['StartCutPt'].x);
					}
				}
			}
			//mouse over event for updating cut as they go through the log
			protected function logMidLog(e:MouseEvent):void{
				sawdustParticles.x = e.stageX+10;
				sawdustParticles.y = e.stageY+10;
				var offsetX:Number = e.localX - e.currentTarget.content.x;
				var offsetY:Number = e.localY - e.currentTarget.content.y;
				e.currentTarget.content['midLogMod'](offsetX,offsetY);

			}

			protected function updateVolume(vol:Number):void
			{
				//cannot do: SoundMixer.soundTransform.volume = vol/100;
				var st:SoundTransform = SoundMixer.soundTransform;
				st.volume = vol/100;
				SoundMixer.soundTransform = st;
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<s:Label			id="mGameTitle" x="38" y="19" text="CHAINSAW" fontSize="60" fontWeight="bold" fontFamily="Georgia" color="#669035" verticalAlign="middle" height="49"/>
	<s:Label			id="mVersionLabel" x="565" y="2" color="#669035" initialize="mVersionLabel.text=VERSION" />
	<s:Button			id="mStartButton" x="18.5" y="93" label="Start" enabled="true" click="onClickStartButton(event)" fontWeight="bold" fontSize="14" width="90" height="29" mouseUp="mChainsawSound.play(0,int.MAX_VALUE)"/>
	<s:Button			id="mStopButton" x="18.5" y="484" label="Stop" enabled="false" click="onClickStopButton(event)" fontWeight="bold" fontSize="14" width="90" height="29"/>
	<s:Button			id="mChangeLevelButton" x="18.5" y="519" label="Change Level" enabled="true" click="onClickChangeLevelButton(event)" fontWeight="bold" fontSize="12" width="100" height="29" chromeColor="#4E8E54"/>
	<s:BorderContainer	id="mLogYardContainer" x="15" y="147" width="597" height="324" backgroundColor="#EAD1AA">
		<s:SWFLoader		id="mDynamicLog" x="-5" y="0" source="assets/DynamicLog.swf" complete="initLog1()" mouseUp="logUp(event)" mouseOver="logIn(event)" mouseOut="logOut(event)" mouseMove="logMidLog(event)"/>
		<s:SWFLoader		id="mDynamicLog2" x="-5" y="0" source="assets/DynamicLog.swf" complete="initLog2()" mouseUp="logUp(event)" mouseOver="logIn(event)" mouseOut="logOut(event)" mouseMove="logMidLog(event)"/>
		<s:SWFLoader		id="mDynamicLog3" x="-5" y="0" source="assets/DynamicLog.swf" complete="initLog3()" mouseUp="logUp(event)" mouseOver="logIn(event)" mouseOut="logOut(event)" mouseMove="logMidLog(event)"/>
		<s:SWFLoader		id="mDynamicLog4" x="-5" y="0" source="assets/DynamicLog.swf" complete="initLog4()" mouseUp="logUp(event)" mouseOver="logIn(event)" mouseOut="logOut(event)" mouseMove="logMidLog(event)"/>
		<s:Group			id="mStatusLabelHolder" x="0" y="0" width="597" height="324" visible="false"/>
		<s:Label			id="mCutEdgeRightLabel" x="0" y="0" text="- Cut Log" width="60" height="15" fontSize="11" fontWeight="normal" textAlign="left"/>
		<s:Label			id="mCutEdgeLeftLabel" x="0" y="0" text="Cut Log -" width="60" height="15" fontSize="11" fontWeight="normal" textAlign="right"/>
		<s:Label 			x="-1" y="296" text="PRACTICE LEVEL" width="597" textAlign="center" height="26" fontSize="14" verticalAlign="middle" fontWeight="bold" fontFamily="Georgia" fontStyle="normal" id="mLevelLabel" color="#1C7B56"/>
		<s:HSlider			id="mVolumeSlider" x="505" y="305" width="80" maximum="100" value="100" change="updateVolume(mVolumeSlider.value)"/>
			<s:Image		id="mVolumeImage" x="480" y="302" source="{mVolumeIcon}"/>
	</s:BorderContainer>
	<s:Label			id="mAcceptedPiecesLabel" x="399" y="486" text="Number of Accepted Pieces" fontSize="16" fontWeight="bold"/>
	<s:BorderContainer	id="mAcceptedPiecesBox" x="465" y="513" width="75" height="35" borderWeight="2" dropShadowVisible="true">
		<s:Label			id="mAcceptedPiecesValue" x="10" y="8" text="0" fontSize="16" verticalAlign="middle" fontWeight="bold" width="51" textAlign="center" visible="false"/>
	</s:BorderContainer>
	
	<s:Label			id="mReferenceLengthLabel" x="205" y="486" text="Target Length" fontSize="16" fontWeight="bold"/>
	<mx:Image			id="mReferenceLengthImage" x="223" y="515" source="{mLengthImage}"/>
	<mx:Image			id="mReferenceLengthImage2" x="223" y="515" source="{mTapeMeasureImage}"/>
	
	<s:SWFLoader 		id="mFuelIcon" x="497" y="21" width="106" height="118" source="assets/GasTank.swf" complete="initGasTank()"/>
	<!-- <s:SWFLoader		id="mSawdustParticles" x="0" y="0" width="100" height="100"  source="assets/particles.swf" complete="initParticles()"/> -->
	<s:Label			id="mPlayersNameLabel" x="140.5" y="100.5" text="PLAYER'S NAME:" fontFamily="Arial" fontSize="16" fontWeight="bold" color="#7B9453"/>
	<s:TextInput		id="mPlayerTextInput" x="281" y="94" width="132" text="Player" color="#7B9453" fontSize="16" enabled="true" change="onChangePlayerTextInput(event)" textAlign="left" fontWeight="bold"/>
	<mx:UIComponent		id="uic" x="0" y="0" />
</s:Application>
